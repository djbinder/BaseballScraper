<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BaseballScraper</name>
    </assembly>
    <members>
        <member name="M:BaseballScraper.Controllers.AGGREGATORS.LaunchCoreSpSitesController.LaunchAllPagesInChromeForPlayer(System.String,System.String)">
            <summary>
                Launch all websites for an individual in Google Chrome
                Sites include:
                    * FanGraphs
                    * Baseball Prospectus
                    * Rotowire
                    * Baseball Savant
                    * Baseball HQ
                    * Yahoo
            </summary>
            <remarks>
                Uses google sheet connector
                See: gSheetNames.json for sheet info
                Relies on SfbbPlayerIdMap to pull various ids for the player
            </remarks>
            <example>
                LaunchAllPagesInChromeForPlayer("tyler","chatwood");
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.AGGREGATORS.LaunchCoreSpSitesController.LaunchPlayersFanGraphsPageInChrome(BaseballScraper.Models.Player.SfbbPlayerBase)">
            <summary>
                Launch FanGraphs page for player
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.AGGREGATORS.LaunchCoreSpSitesController.LaunchPlayersBaseballProsectusPageInChrome(BaseballScraper.Models.Player.SfbbPlayerBase)">
            <summary>
                Launch Baseball Prospectus page for player
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.AGGREGATORS.LaunchCoreSpSitesController.LaunchPlayersRotowirePageInChrome(BaseballScraper.Models.Player.SfbbPlayerBase)">
            <summary>
                Launch Rotowire page for player
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.AGGREGATORS.LaunchCoreSpSitesController.LaunchPlayersBaseballSavantPageInChrome(BaseballScraper.Models.Player.SfbbPlayerBase)">
            <summary>
                Launch Baseball Savant page for player
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.AGGREGATORS.LaunchCoreSpSitesController.LaunchPlayersBaseballHqPageInChrome(BaseballScraper.Models.Player.SfbbPlayerBase)">
            <summary>
                Launch Baseball HQ page for player
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.AGGREGATORS.LaunchCoreSpSitesController.LaunchPlayersYahooPageInChrome(BaseballScraper.Models.Player.SfbbPlayerBase)">
            <summary>
                Launch Yahoo page for player
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.AGGREGATORS.LaunchCoreSpSitesController.LaunchPlayersBaseballReferencePageInChrome(BaseballScraper.Models.Player.SfbbPlayerBase)">
            <summary>
                Launch Baseball Reference page
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.AGGREGATORS.LaunchCoreSpSitesController.FormatPlayerFirstAndLastName(System.String)">
            <summary>
                Capitalizes first letter in player's first and / or last name
                Without this, you will get an error / will not find player in sheet
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballHQControllers.BaseballHqHitterController.DownloadRestOfSeasonProjections(System.Boolean)">
            <summary>
                * Downloads csv from hq
                * File should be downloaded each day to get the latest and greatest data
            </summary>
            <remarks>
                * STEPS
                  * 1) Go to baseball hq website and log in
                  * 2) Navigate to reports page and download report to local downloads folder
                  * 3) Move report to hq target write folder
                * PARAMATERS
                  * _hqRestOfSeasonProjectionReportInitialCsvFileName  = BaseballHQ_M_B_P.csv
                  * _hitterRestOfSeasonProjectionsCsvFileNameBase      = HqHitterReport_PROJ_
            </remarks>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballHQControllers.BaseballHqHitterController.AddOneRosAsync_DB(BaseballScraper.Models.BaseballHq.HqHitterRestOfSeasonProjection)">
            <summary>
                * Add one HqHitterRestOfSeasonProjection to the database
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballHQControllers.BaseballHqHitterController.AddAllRosAsync_DB(System.Collections.Generic.IList{BaseballScraper.Models.BaseballHq.HqHitterRestOfSeasonProjection})">
            <summary>
                * Add list of HqHitterRestOfSeasonProjection hitters to the database
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballHQControllers.BaseballHqHitterController.GetOneRosAsync_DB(System.Nullable{System.Int32})">
            <summary>
                * Read one HqHitterRestOfSeasonProjection hitter from database
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballHQControllers.BaseballHqHitterController.GetAllRos_DB">
            <summary>
                * Read all HqHitterRestOfSeasonProjection hitters from database
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballHQControllers.BaseballHqHitterController.GetAllYtdAsync_CSV(System.Boolean)">
            <summary>
                Gets YTD csv from hq site and adds hitters to database
            </summary>
            <remarks>
                * Should be run each day
                * 1) Checks if Csv File for todays exists in Hq Target_Write folders
                * 2) If file doesn't exist, go to Hq website and download report
                * 3) Check if there are records in the database table
                * 4) If there are records, delete them (so you can replace them with todays data)
                * 5) Add records to the HqHitterYearToDate table
            </remarks>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.WriteBaseballSavantSingleDayDataToCsv(System.Int32,System.Int32,System.Int32)">
            <summary>
                Write SP CSW data from Baseball Savant to CSV File
                Uses 'GetAllSpCswSingleDayEndPointUri' end point
            </summary>
            <remarks>
                If the file already exists, it will not create a new file
            </remarks>
            <param name="year">
                ints that represents the year you want to get data for and write to a CSV
            </param>
            <param name="monthNumber">
                ints that represents the month number you want to get data for and write to a CSV
            </param>
            <param name="dayNumber">
                ints that represents the day number you want to get data for and write to a CSV
            </param>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.GetAllSpCswSingleDayEndPointUri(System.Int32,System.Int32,System.Int32)">
            <summary>
                Create end point for 'WriteBaseballSavantSingleDayDataToCsv' method to write to
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.SetCsvFilePathSpCswSingleDay(System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a string of the fill path name
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.ReadSpCswCsvSingleDayAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
                Read CSV File of 'StartingPitcherCswSingleDay' instances
                The file includes SP CSW(called strike + whiffs) for pitchers that pitched on a certain day
            </summary>
            <remarks>
                * This reads a given file in BaseballData/02_Target_Write/BaseballSavant_Target_Write project folder
                * If a file does not exist for the date entered, you'll get an error
                * Uses CsvHandler from project Infrastructure to read the file
                * 'csvFilePath' will be something like:
                    BaseballData/02_Target_Write/BaseballSavant_Target_Write/Bs_AllSpSingleDayCsw5_29_2019.csv
                * file name example: Bs_AllSpSingleDayCsw5_29_2019.csv
                * Printer --> PrintBsSpCswDetail(_dynamicList);
            </remarks>
            <param name="monthNumber">
                ints that represents the month number you want to get data for and write to a CSV
            </param>
            <param name="dayNumber">
                ints that represents the day number you want to get data for and write to a CSV
            </param>
            <param name="year">
                ints that represents the year you want to get data for and write to a CSV
            </param>
            <example>
                var spCswList = await ReadSpCswCsvSingleDayAsync(5,29,2019);
            </example>
            <returns>
                A list of StartingPitcherCswSingleDay
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.AddStartingPitcherCswSingleDayToDatabase(BaseballScraper.Models.BaseballSavant.StartingPitcherCswSingleDay)">
            <summary>
                Add StartingPitcherCswSingleDay to Database
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.AddStartingPitcherCswsSingleDayToDatabaseFromList(System.Collections.Generic.List{BaseballScraper.Models.BaseballSavant.StartingPitcherCswSingleDay})">
            <summary>
                Add StartingPitcherCswSingleDay to Database from list
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.CreateSpCswSingleDayList(System.Collections.Generic.List{System.Object},System.Int32,System.Int32,System.Int32)">
            <summary>
                Create list of StartingPitcherCswSingleDay
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.WriteBaseballSavantDateRangeDataToCsv(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Write SP CSW data from Baseball Savant to CSV File
                Uses 'GetAllSpCswRangeOfDaysEndPointUri' end point
            </summary>
            <param name="year">
                ints that represents the year you want to get data for and write to a CSV
            </param>
            <param name="startMonth">
                ints that represents the start month number you want to get data for and write to a CSV
            </param>
            <param name="startDay">
                ints that represents the start day number you want to get data for and write to a CSV
            </param>
            <param name="endMonth">
                ints that represents the end month number you want to get data for and write to a CSV
            </param>
            <param name="endDay">
                ints that represents the end day number you want to get data for and write to a CSV
            </param>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.GetAllSpCswRangeOfDaysEndPointUri(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Create end point for 'WriteBaseballSavantDateRangeDataToCsv' method to write to
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.SetCsvFilePathSpCswDateRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a string of the fill path name
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.ReadSpCswCsvDateRangeAsync(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Read CSV File of 'StartingPitcherCswFullSeason' instances from day X to day Y
                The file includes SP CSW(called strike + whiffs) for pitchers in that date range
            </summary>
            <remarks>
                * This reads a given file in BaseballData/02_Target_Write/BaseballSavant_Target_Write project folder
                * If a file does not exist for the date range entered, you'll get an error
                * Uses CsvHandler from project Infrastructure to read the file
                * 'csvFilePath' will be something like:
                    BaseballData/02_Target_Write/BaseballSavant_Target_Write/Bs_SpCswDateRange5_1_2019_to_5_15_2019.csv
                * file name example: Bs_SpCswDateRange5_1_2019_to_5_15_2019.csv
            </remarks>
            <param name="year">
                ints that represents the year you want to get data for and write to a CSV
            </param>
            <param name="startMonth">
                ints that represents the start month number you want to get data for and write to a CSV
            </param>
            <param name="startDay">
                ints that represents the start day number you want to get data for and write to a CSV
            </param>
            <param name="endMonth">
                ints that represents the end month number you want to get data for and write to a CSV
            </param>
            <param name="endDay">
                ints that represents the end day number you want to get data for and write to a CSV
            </param>
            <example>
                var spCswList = await ReadSpCswCsvDateRangeAsync(2019, 5, 1, 5, 15);
            </example>
            <returns>
                A list of StartingPitcherCswDateRange
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.AddStartingPitcherCswDateRangeToDatabase(BaseballScraper.Models.BaseballSavant.StartingPitcherCswDateRange)">
            <summary>
                Add StartingPitcherCswDateRange to Database
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.AddStartingPitcherCswsDateRangeToDatabaseFromList(System.Collections.Generic.List{BaseballScraper.Models.BaseballSavant.StartingPitcherCswDateRange})">
            <summary>
                Add StartingPitcherCswDateRange to Database from list
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.CreateSpCswDateRangeList(System.Collections.Generic.List{System.Object},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Create list of StartingPitcherCswDateRange
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.WriteBaseballSavantFullSeasonData(System.Int32)">
            <summary>
                Write SP CSW data from Baseball Savant to CSV File
                Uses 'GetAllSpCswFullSeasonEndPointUri' end point
            </summary>
            <param name="year">
                The year / season you want to search for
            </param>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.GetAllSpCswFullSeasonEndPointUri(System.Int32)">
            <summary>
                Create end point for 'WriteBaseballSavantFullSeasonData' method to write to
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.SetCsvFilePathSpCswFulLSeason(System.Int32)">
            <summary>
                Creates a string of the fill path name
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.ReadSpCswCsvFullSeasonAsync(System.Int32)">
            <summary>
                Read CSV File of 'StartingPitcherCsw' instances for a year / season
                The file includes SP CSW(called strike + whiffs) for pitchers in that season
            </summary>
            <remarks>
                * This reads a given file in BaseballData/02_Target_Write/BaseballSavant_Target_Write project folder
                * If a file does not exist for the season / year entered, you'll get an error
                * Uses CsvHandler from project Infrastructure to read the file
                * 'csvFilePath' will be something like:
                    BaseballData/02_Target_Write/BaseballSavant_Target_Write/Bs_SpCswDateRange_FULL_SEASON_2019.csv
                * file name example: Bs_SpCswDateRange_FULL_SEASON_2019.csv
            </remarks>
            <param name="year">
                The year / season you want to search for
            </param>
            <example>
                var spCswList = await ReadSpCswCsvFullSeasonAsync(2019)
            </example>
            <returns>
                A list of StartingPitcherCsw
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.AddStartingPitcherCswFullSeasonToDatabase(BaseballScraper.Models.BaseballSavant.StartingPitcherCswFullSeason)">
            <summary>
                Add StartingPitcherCsw to Database
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.AddStartingPitcherCswsFullSeasonToDatabaseFromList(System.Collections.Generic.List{BaseballScraper.Models.BaseballSavant.StartingPitcherCswFullSeason})">
            <summary>
                Add StartingPitcherCsw to Database from list
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.BaseballSavantControllers.BaseballSavantSpController.CreateSpCswFullSeasonList(System.Collections.Generic.List{System.Object},System.Int32)">
            <summary>
                Create list of StartingPitcherCsw
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.CbsControllers.CbsTransactionTrendsController.GetListOfCbsMostAddedOrDropped(System.String)">
            <summary> Returns a list of the most added or dropped players according to Cbs trends; Does not filter by position </summary>
            <remarks>
                CbsRankCurrentWeek - % of leagues that have the player on a roster this week
                CbsRankPreviousWeek - % of leagues that have the player on a roster last week
            </remarks>
            <param name="urlToScrape"> The url of the Cbs roster trends; Should be either the url for most added or most dropped </param>
            <example> Most Added --> GetListOfCbsMostAddedOrDropped(urlForMostAddedAll); </example>
            <example> Most Dropped --> GetListOfCbsMostAddedOrDropped(urlForMostDroppedAll); </example>
            <returns> A list of most added or dropped players</returns>
        </member>
        <member name="M:BaseballScraper.Controllers.CbsControllers.CbsTransactionTrendsController.GetListOfCbsMostAddedOrDroppedByPosition(System.String,System.String)">
            <summary> Returns a list of the most added or dropped players according to Cbs trends filtered by position </summary>
            <remarks>
                CbsRankCurrentWeek - % of leagues that have the player on a roster this week
                CbsRankPreviousWeek - % of leagues that have the player on a roster last week
            </remarks>
            <param name="urlToScrapePrefix"> The url of the Cbs roster trends; Should be either the url for most added or most dropped </param>
            <param name="position"> Position type: 1B, 2B, 3B, SS, OF, C, DH, SP, RP </param>
            <example> Most Added --> GetListOfCbsMostAddedOrDroppedByPosition(urlForMostAddedByPositionPrefix,"1B"); </example>
            <example> Most Dropped --> GetListOfCbsMostAddedOrDroppedByPosition(urlForMostDroppedByPositionPrefix,"1B"); </example>
            <returns> A list of most added or dropped players for one position </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.CbsControllers.CbsTransactionTrendsController.GetListOfCbsMostViewedPlayers(System.String)">
            <summary> Returns a list of the most viewed players according to Cbs trends; Does not filter by position </summary>
            <param name="urlToScrape"> The url of the Cbs roster trends for most viewed </param>
            <example> GetListOfCbsMostViewedPlayers(urlForMostViewedAll); </example>
            <returns> A list of most viewed players </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.CbsControllers.CbsTransactionTrendsController.GetListOfCbsMostViewedPlayersByPosition(System.String,System.String)">
            <summary> Returns a list of the most viewed players according to Cbs trends for one position </summary>
            <param name="urlToScrapePrefix"> The url of the Cbs roster trends for most viewed </param>
            <param name="position"> Position type: 1B, 2B, 3B, SS, OF, C, DH, SP, RP </param>
            <example> GetListOfCbsMostViewedPlayersByPosition(urlForMostViewedByPositionPrefix, "1B"); </example>
            <returns> A list of most viewed players for one position </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.CbsControllers.CbsTransactionTrendsController.GetListOfCbsMostTradedPlayers(System.String)">
            <summary> Returns a list of the most traded players according to Cbs trends; Does not filter by position </summary>
            <param name="urlToScrape"> The url of the Cbs roster trends for most traded </param>
            <example> GetListOfCbsMostTradedPlayers(urlForMostTradedAll); </example>
            <returns> A list of most traded players </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.CbsControllers.CbsTransactionTrendsController.GetListOfCbsMostTradedPlayersByPosition(System.String,System.String)">
            <summary> Returns a list of the most traded players according to Cbs trends for one position </summary>
            <param name="urlToScrapePrefix"> The url of the Cbs roster trends for most traded </param>
            <param name="position"> Position type: 1B, 2B, 3B, SS, OF, C, DH, SP, RP </param>
            <example> GetListOfCbsMostTradedPlayersByPosition(urlForMostTradedByPositionPrefix, "1B"); </example>
            <returns> A list of most traded players for one position </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.EspnControllers.EspnTransactionTrendsController.GetListOfMostAddedPlayers">
            <summary> Gets the top 25 most added players from ESPN </summary>
            <returns> A list of EspnTransactionTrendPlayer </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.EspnControllers.EspnTransactionTrendsController.GetListOfMostDroppedPlayers">
            <summary> Gets the top 25 most dropped players from ESPN </summary>
            <returns> A list of EspnTransactionTrendPlayer </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.FanGraphsControllers.FanGraphsHitterController.ScrapeMasterHittersReport(BaseballScraper.EndPoints.FanGraphsUriEndPoints.PositionEnum,System.Int32,System.String,System.Int32)">
            <summary>
                Scapes FanGraphs hitter master report html
                By default, returns 30 rows per page
            </summary>
            <remarks>
                * Launches browser (i.e., Headless = false)
                * // * Uses local chrome instance instead of Chromium (i.e., ExecutablePath = GoogleChromePath)
                * See: FanGraphsUriEndPoints more info
                * See: http://www.puppeteersharp.com/api/index.html
            </remarks>
            <param name="positionEnum">
                See FanGraphsUriEndPoints for enum options
                Examples are: PositionEnum.Catcher, PositionEnum.Outfield, PositionEnum.FirstBase
                Optional parameter; Defaults to PositionEnum.All if no selection is passed in method
            </param>
            <param name="minPlateAppearances">
                Min # of PAs a hitter needs to be included in the scrape
                Optional parameter; Defaults to all qualified hitters if no value is passed in method
            </param>
            <param name="league">
                "al" OR "nl"
                Optional parameter; Defaults to both leagues if no value is passed in method
            </param>
            <param name="year">
                The year or season (e.g., 2019) to search for
                Optional parameter; Defaults to current year no value is passed in method
            </param>
            <example>
                NO FILTERS:     var scrapeWithNoFilters = await ScrapeMasterHittersReport();
                CATCHERS ONLY:  var scrapeForCatchers = await ScrapeMasterHittersReport(positionEnum: PositionEnum.Catcher);
                OF IN 2018:     var scrapeForOutfieldersIn2018 = await ScrapeMasterHittersReport(positionEnum: PositionEnum.Outfield, year: 2018);
                NL SS, 100PA+:  var scrapeForOutfieldersIn2018 = await ScrapeMasterHittersReport(positionEnum: PositionEnum.Shortstop, minPlateAppearances: 100, league: "nl");
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.FanGraphsControllers.FanGraphsHitterController.GetIntFromPage(PuppeteerSharp.Page,System.String)">
            <summary>
                Gets a specific value from within the html of the page
            </summary>
            <param name="page">
                a PuppeteerSharp.Page
            </param>
            <param name="selector">
                CSS selector which can be attained by inspecting the html in Chrome / Firefox
            </param>
            <remarks>
                This is used to get the number of pages to scrape and / or rows on page to scrape
            </remarks>
            <example>
                int numberOfPagesToScrape = await GetIntFromPage(page, _pageCountSelector);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.FanGraphsControllers.FanGraphsHitterController.GetNumberOfPagesToScape(PuppeteerSharp.Page,System.String)">
            <summary>
                Gets the number of rows on page to scrape
            </summary>
            <example>
                int numberOfPagesToScrape = await GetNumberOfPagesToScape(page, endPoint);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.FanGraphsControllers.FanGraphsHitterController.GetNumberOfPagesToScape(PuppeteerSharp.Page)">
            <summary>
                Gets the number of rows on page to scrape
            </summary>
            <example>
                int numberOfPagesToScrape = await GetNumberOfPagesToScape(page);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.FanGraphsControllers.FanGraphsHitterController.ConvertCellWithPercentageSymbolToDecimal(Newtonsoft.Json.Linq.JToken)">
            <summary>
                Some cells have % symbol in them; this removes it and just gives the number back
                e.g., 13.1% becomes 13.1
                Helper method for: 'CreateFanGraphsHitterInstance(JToken allValuesInRow)' method
            </summary>
            <remarks>
                See: https://stackoverflow.com/questions/2171615/how-to-convert-percentage-string-to-double
            </remarks>
            <example>
                int numberOfPagesToScrape = await GetNumberOfPagesToScape(page);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.HomeController.Index">
            <summary>
            The home controller
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.LahmanControllers.LahmanPlayerInfoController.GetPlayerInfoForAllPlayersWithLastName(System.String)">
            <summary>
                Get list of Mlb player's Player Id, First Name, Last Name
            </summary>
            <remarks>
                See: 'playerInfo' section @ http://lahman.r-forge.r-project.org/doc/
                See: https://analyticsrusers.blog/2018/05/31/leverage-r-code-within-net-environments-running-a-cvar-model-in-a-c-applications/
            </remarks>
            <example>
                var playerInfoList = GetPlayerInfoForAllPlayersWithLastName("rizzo");
            </example>
            <returns>
                List of LahmanPlayerInfo that includes: Lahman Id, First Name, Last Name
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.LahmanControllers.LahmanPlayerInfoController.CreateLahmanPlayerInfoInstance(RDotNet.DataFrame,System.Int32,System.String)">
            <summary>
                Instantiate instance of LahmanPlayerInfo
            </summary>
        </member>
        <member name="T:BaseballScraper.Controllers.MlbDataApiControllers.MlbDataHittingLeadersController">
            <summary>
                Generate instance of MlbDataHittingLeader
            </summary>
            <list> INDEX
                <item> Create Hitting Leaders Model<see cref="M:BaseballScraper.Controllers.MlbDataApiControllers.MlbDataHittingLeadersController.CreateHittingLeadersModel(System.Int32,System.String,System.String)" /> </item>
                <item> Get Hitting Leaders Async   <see cref="M:BaseballScraper.Controllers.MlbDataApiControllers.MlbDataHittingLeadersController.GetHittingLeadersAsync(System.Int32,System.String,System.String)" /> </item>
                <item> View Hitting Leaders Async  <see cref="M:BaseballScraper.Controllers.MlbDataApiControllers.MlbDataHittingLeadersController.ViewHittingLeadersAsync(System.Int32,System.String,System.String)" /> </item>
            </list>
        </member>
        <member name="M:BaseballScraper.Controllers.MlbDataApiControllers.MlbDataHittingLeadersController.CreateHittingLeadersModel(System.Int32,System.String,System.String)">
            <summary>
                Get the current seasons hitting leaders; Endpoint parameters passed as parameters to method
            </summary>
            <remarks>
                Parameters for 'HittingLeadersEndPoint' (i.e. numberToReturn, year, sortColumn) are passed as parameters to the method
                See: https://appac.github.io/mlb-data-api-docs/#reports-hitting-leaders-get
            </remarks>
            <param name="numberToReturn">
                The number of hitters to return in the results (e.g. 50 would show you the top 50 leaders)
            </param>
            <param name="year">
                The year that you want to retrieve the leaders for (e.g. 2018 gets you leaders for 2018 mlb season)
            </param>
            <param name="sortColumn">
                This is the stat you want to retrieve the leaders for (e.g., Hr, Rbi etc)
                See: View 'LeadingHitter' model for options that you can sort by for this method
            </param>
            <example>
                var hittingLeaders = CreateHittingLeadersModel(5, "2019", "hr");
            </example>
            <returns>
                A list of instantiated 'LeadingHitter' for 'numberToReturn' number of hitters
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.MlbDataApiControllers.MlbDataHittingLeadersController.GetHittingLeadersAsync(System.Int32,System.String,System.String)">
            <summary> OPTION 1: Gets a list of Mlb hitting leaders for a defined season </summary>
            <param name="numberToReturn"> OPTION 2: The number of hitters to return in the results (e.g. 50 would show you the top 50 leaders) </param>
            <param name="year"> The year that you want to retrieve the leaders for (e.g. 2018 gets you leaders for 2018 mlb season) </param>
            <param name="sortColumn"> This is the stat you want to retrieve the leaders for (e.g., Hr, Rbi etc) </param>
                    <see> View 'LeadingHitter' model for options that you can sort by for this method </see>
        </member>
        <member name="M:BaseballScraper.Controllers.MlbDataApiControllers.MlbDataHittingLeadersController.ViewHittingLeadersAsync(System.Int32,System.String,System.String)">
            <summary> OPTION 1: Initiate retrieval of mlb hitting leaders for current season </summary>
            <param name="numberToReturn"> The number of hitters to return in the results (e.g. 50 would show you the top 50 leaders) </param>
            <param name="year"> The year that you want to retrieve the leaders for (e.g. 2018 gets you leaders for 2018 mlb season) </param>
            <param name="sortColumn"> This is the stat you want to retrieve the leaders for (e.g., Hr, Rbi etc) </param>
            <see> View 'LeadingHitter' model for options that you can sort by for this method </see>
            <example> https://127.0.0.1:5001/api/mlb/hittingleaders </example>
            <returns> Hitting leaders for current season </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.MlbDataApiControllers.cs.MlbDataPitchingLeadersController.CreatePitchingLeadersModel(System.Int32,System.String,System.String)">
            <summary>
                Get the current seasons pitching leaders; Endpoint parameters passed as parameters to method
            </summary>
            <remarks>
                Parameters for 'PitchingLeadersEndPoint' (i.e. numberToReturn, year, sortColumn) are passed as parameters to the method
                See: 'LeadingPitcher' model for options that you can sort by for this method
            </remarks>
            <param name="numberToReturn">
                The number of pitchers to return in the results (e.g. 50 would show you the top 50 leaders)
            </param>
            <param name="year">
                The year that you want to retrieve the leaders for (e.g. 2018 gets you leaders for 2018 mlb season)
            </param>
             <param name="sortColumn">
                This is the stat you want to retrieve the leaders for (e.g., Era, Wins, etc)
            </param>
            <returns>
                A list of instantiated 'LeadingPitching' for 'numberToReturn' number of pitchers
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.MlbDataApiControllers.cs.MlbDataPitchingLeadersController.GetPitchingLeadersAsync(System.Int32,System.String,System.String)">
            <summary>
                Get pitchin leaders w parameters
            </summary>
            <remarks>
                'LeadingPitcher' model for options that you can sort by for this method
            </remarks>
            <param name="numberToReturn">
                OPTION 1: The number of pitchers to return in the results (e.g. 50 would show you the top 50 leaders)
            </param>
            <param name="year">
                The year that you want to retrieve the leaders for (e.g. 2018 gets you leaders for 2018 mlb season)
            </param>
            <param name="sortColumn">
                This is the stat you want to retrieve the leaders for (e.g., era, wins etc)
            </param>
        </member>
        <member name="M:BaseballScraper.Controllers.MlbDataApiControllers.cs.MlbDataPitchingLeadersController.ViewPitchingLeadersAsync(System.Int32,System.String,System.String)">
            <summary> Initiate retrieval of mlb pitching leaders for current season </summary>
            <param name="numberToReturn"> The number of pitchers to return in the results (e.g. 50 would show you the top 50 leaders) </param>
            <param name="year"> The year that you want to retrieve the leaders for (e.g. 2018 gets you leaders for 2018 mlb season) </param>
            <param name="sortColumn"> This is the stat you want to retrieve the leaders for (e.g., era, wins etc) </param>
            <see> View 'LeadingPitcher' model for options that you can sort by for this method </see>
            <example> https://127.0.0.1:5001/api/mlb/pitchingleaders </example>
            <returns> Pitching leaders for current season </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.MlbDataApiControllers.cs.MlbDataProjectedPitchingStatsController.ViewPlayerInfo(System.Int32)">
            <summary> View instantiated pecota projections for a selected pitcher in a selected season  </summary>
            <example> https://127.0.0.1:5001/api/mlb/projectedpitchingstats/592789 </example>
            <returns> A view of a projectedpitchingstats model </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.MlbDataApiControllers.MlbDataPlayerInfoController.CreatePlayerInfoInstance(System.Int32)">
            <summary>
                View instantiated player model with player's info
            </summary>
            <returns>
                A view of a playerinfo model
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.MlbDataApiControllers.MlbDataPlayerSearchController.ViewPlayerSearchModel(System.String)">
            <summary>
                View instantiated PlayerSearch object
            </summary>
            <remarks>
                See: https://appac.github.io/mlb-data-api-docs/#player-data-player-search-get
            </remarks>
            <returns>
                Instantiated PlayerSearch
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.MlbDataApiControllers.MlbDataProjectedHittingStatsController.ViewPlayerInfo(System.Int32)">
            <summary> View instantiated pecota projections for a selected hitter in a selected season  </summary>
            <example> https://127.0.0.1:5001/api/mlb/projectedhittingstats/493316 </example>
            <returns> A view of a projectedhittingstats model </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.PlayerControllers.PlayerBaseController.DownloadTodaysCrunchTimeCSV">
            <summary>
            * Downloads CrunchTime CSV and saves to local directory
            </summary>
            <remarks>
            * STEPS:
            * 1) Downloads CSV From http://crunchtimebaseball.com/master.csv
            * 2) Saves CSV to local directory
            *    > Directory Example: BaseballData/02_WRITE_CRUNCH_TIME
            *    > File Name Example: CrunchTime_Csv_8_26_2019.csv
            *    > These are set in corresponding EndPoints class
            </remarks>
        </member>
        <member name="M:BaseballScraper.Controllers.PlayerControllers.PlayerBaseController.AddOneAsync_DB(BaseballScraper.Models.Player.SfbbPlayerBase)">
            <summary>
                Add one SfbbPlayer to database
            </summary>
            <remarks>
                * A variety of errors pop up in this process
                * StringBuilder used to track paths:
                * > A --> B : Exists; do nothing
                * > A --> C : Does not exist; Create successful
                * > A --> D --> E : Does not exist; Some kind of error; Create successful
                * > A --> D --> F : Does not exist; Some kind of error; Create fails
                * Connected to a Google Sheet that I do not own (See: https://bit.ly/2MntLLP)
                * I auto import that data to a sheet I do own
            </remarks>
            <param name="playerBase">
                An SfbbPlayerBase
            </param>
        </member>
        <member name="M:BaseballScraper.Controllers.PlayerControllers.PlayerBaseController.AddAllAsync_DB(System.Collections.Generic.List{BaseballScraper.Models.Player.SfbbPlayerBase})">
            <summary>
                * Add list of playerBases
                * AddAll_DB Option 1 for SfbbPlayerBases
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.PlayerControllers.PlayerBaseController.PlayerBaseFromExcel.GetAllPlayerBasesFromExcel">
            <summary>
                Retrieves all records from PlayerBase.xlsx document
            </summary>
            <returns>
                IEnumerable of PlayerBases
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.PlayerControllers.PlayerBaseController.PlayerBaseFromExcel.GetAllPlayerBasesForOneMlbTeam(System.String)">
            <summary>
                Retrieves all records from PlayerBase.xlsx document for one team
            </summary>
            <param name="teamNameFull">
                A full mlb team name (e.g., "Boston Red Sox"
            </param>
            <example>
               var players = GetAllPlayerBasesForOneMlbTeam("Chicago Cubs");
            </example>
            <returns>
                IEnumerable of PlayerBases
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.PlayerControllers.PlayerBaseController.PlayerBaseFromExcel.GetOnePlayersBaseFromBaseballHqId(System.String)">
            <summary>
                Each of methods in this section returns a player (from IEnumerable PlayerBases)
                The only difference is the type of Id you are passing in (e.g. MlbId, FanGraphsPlayerId, EspnPlayerId etc.)
            </summary>
            <returns>
                IEnumerable of PlayerBases (i.e. a PlayerBase for one player)
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.PlayerControllers.PlayerBaseController.PlayerBaseGenerator.GetAllPlayerIdsList(BaseballScraper.Models.Player.PlayerBase)">
            <summary> This method created a list of a player's ids from all id types available in the PlayerBase Excel file </summary>
            <param name="playersBase"> An instantiated PlayerBase</param>
            <returns> A list of all of a player's ids </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.PlayerControllers.PlayerBaseController.PlayerBaseGenerator.GetAllPlayerIdsDictionary(BaseballScraper.Models.Player.PlayerBase)">
            <summary> This method created a dictionary of a player's ids from all id types available in the PlayerBase; The keys are the id type, the values are the actual id number  </summary>
            <param name="playersBase"> An instantiated PlayerBase </param>
            <returns> A dictionary of all of a player's ids with key value pairs of Key: Id type, Value: id number/string </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterController.ExecuteTwitterStringSearch(System.String)">
            <summary>
                Search all of Twitter to find most recent tweets that include 'searchString' parameter
                Set to return last 100 relevant tweets which is the max possible
            </summary>
            <remarks>
                Uses LinqToTwitter
                See: https://github.com/JoeMayo/LinqToTwitter/wiki/Searching-Twitter
            </remarks>
            <param name="searchString">
                The string that you would like to search twitter for
            </param>
            <example>
                string fullName = "Anthony Rizzo";
                var taskSearch = await ExecuteTwitterStringSearch(fullName);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterController.CreateNewStatusListForEach(LinqToTwitter.Search)">
            <summary>
                Create a List of TwitterStatus given LinqToTwitter Search FOR EACH
            </summary>
            <remarks>
                Uses LinqToTwitter
                See: https://github.com/JoeMayo/LinqToTwitter/wiki/Searching-Twitter
            </remarks>
            <param name="searchResponse">
                Search from LinqToTwitter
            </param>
            <example>
                var twitterStatus = CreateNewStatusListForEach(searchResponse);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterController.CreateNewStatusListFromCount(LinqToTwitter.Search)">
            <summary>
                Create a List of TwitterStatus given LinqToTwitter Search FROM COUNT
            </summary>
            <remarks>
                Uses LinqToTwitter
                See: https://github.com/JoeMayo/LinqToTwitter/wiki/Searching-Twitter
            </remarks>
            <param name="SearchResponse">
                Search from LinqToTwitter
            </param>
            <example>
                var twitterStatus = CreateNewStatusListFromCount(searchResponse);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterController.GetListsForUser(System.String)">
            <summary>
                Create LinqToTwitter.List
            </summary>
            <remarks>
                Uses LinqToTwitter
                See: https://github.com/JoeMayo/LinqToTwitter/wiki/List-Entity
            </remarks>
            <param name="userName">
                The screen name / Twitter handle / user name that you want
            </param>
            <example>
                var taskSearch = await GetListsForUser("mr_baseball");
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterController.AddTwitterStatusToMongoDb(BaseballScraper.Models.Twitter.TwitterStatus)">
            <summary>
                Add a TwitterStatus to mongoDb
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.GetIUserFromScreenName(System.String)">
            <summary>
                Get a Twitter IUser from screen name / Twitter handle / user name
            </summary>
            <remarks>
                Uses tweetinvi to get the user
            </remarks>
            <param name="screenName">
                The screen name / Twitter handle / user name that you want
            </param>
            <example>
                var user = GetIUserFromScreenName("Buster_ESPN");
            </example>
            <returns>
                Tweetinvi.Models.IUser user
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.GetUserDTO(System.String)">
            <summary>
                Get a IUserDTO from screen name / Twitter handle / user name
            </summary>
            <remarks>
                Uses tweetinvi to get the user
                https://github.com/linvi/tweetinvi/wiki/Custom-Queries
            </remarks>
            <param name="screenName">
                The screen name / Twitter handle / user name that you want
            </param>
            <example>
                var iUserDto = GetUserDTO("mr_baseball");
            </example>
            <returns>
                Tweetinvi.Models.DTO.IUserDTO
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.GetIUserFromUserDTO(Tweetinvi.Models.DTO.IUserDTO)">
            <summary>
                Get a IUser from screen name / Twitter handle / user name
            </summary>
            <remarks>
                Uses tweetinvi to get the user
                https://github.com/linvi/tweetinvi/wiki/Custom-Queries
            </remarks>
            <param name="userDTO">
                IUserDTO instance of model defined by tweetinvi
            </param>
            <example>
                var iUserDto = GetUserDTO("mr_baseball");
                var iUser = GetIUserFromUserDTO(iUserDto);
            </example>
            <returns>
                Tweetinvi.Models.IUser
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.GetUserIdsForFollowersOfUser(System.String)">
            <summary>
                Gets an IEnumerable of twitter ids for all followers of a user
            </summary>
            <remarks>
                Uses tweetinvi to get the user ids
                https://github.com/linvi/tweetinvi/wiki/Custom-Queries
            </remarks>
            <param name="screenName">
                The screen name / Twitter handle / user name that you want
            </param>
            <example>
                var userIds = GetUserIdsForFollowersOfUser("Buster_ESPN");
            </example>
            <returns>
                IEnumerable of user ids for Twitter users
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.GetTweetsFromMyTimeline">
            <summary>
                Gets last 40 tweets from personal timeline (i.e., current authenticated user)
            </summary>
            <remarks>
                Uses tweetinvi to get the timeline
                Note these are NOT tweets by the user; it's the tweets of users the current user follows
                See: https://github.com/linvi/tweetinvi/wiki/Timelines
            </remarks>
            <example>
                var tweets = GetTweetsFromMyTimeline();
            </example>
            <returns>
                IEnumerable of Tweetinvi.Models.ITweets
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.GetTweetsFromUsersTimeline(System.String)">
            <summary>
                Gets last 40 tweets from one person's timeline (added as 'screenName' parameter)
            </summary>
            <remarks>
                Uses tweetinvi to get the timeline
                See: https://github.com/linvi/tweetinvi/wiki/Timelines
            </remarks>
            <param name="screenName">
                The screen name / Twitter handle / user name that you want
            </param>
            <example>
                var tweets = GetTweetsFromUsersTimeline("Buster_ESPN");
            </example>
            <returns>
                IEnumerable of Tweetinvi.Models.ITweets
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.SearchTwitterNoFilters(System.String)">
            <summary>
                Gets last X tweets from all Twitter users for 'searchString'
            </summary>
            <remarks>
                Uses tweetinvi to execute the search
                See: https://github.com/linvi/tweetinvi/wiki/Searches
            </remarks>
            <param name="searchString">
                The term or terms that you want to search for
            </param>
            <example>
                var twitterSearch = SearchTwitterNoFilters(searchString);
            </example>
            <returns>
                IEnumerable of Tweetinvi.Models.ITweets
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.GetTweetFromTweetId(System.Int64)">
            <summary>
                Gets one tweet by providing tweetId (e.g., 1142590848724557824)
            </summary>
            <remarks>
                Uses tweetinvi to execute the search
                See: https://github.com/linvi/tweetinvi/wiki/Tweets
            </remarks>
            <param name="tweetId">
                The tweed Id of the tweet you want in long form
            </param>
            <example>
                var tweetIdLong = 1142590848724557824;
                var tweets = GetTweetFromTweetId(tweetIdLong);
            </example>
            <returns>
                Tweetinvi.Models.ITweet
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.GetTweetFromTweetId(System.String)">
            <summary>
                Gets one tweet by providing tweetId (e.g., "1142590848724557824")
            </summary>
            <remarks>
                Uses tweetinvi to execute the search
                See: https://github.com/linvi/tweetinvi/wiki/Tweets
            </remarks>
            <param name="tweetIdString">
                The tweed Id of the tweet you want in string form
            </param>
            <example>
                var tweetIdString = "1142590848724557824";
                var tweets = GetTweetFromTweetId(tweetIdString);
            </example>
            <returns>
                Tweetinvi.Models.ITweet
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.CreateSearchStringToSearchListFor(System.String,System.String,System.String,System.Int32)">
            <summary>
                Create search string to execute twitter list search based on searchString
            </summary>
            <remarks>
                Used within 'GetJObjectOfTweetsFromListFiltered' method
                See for encoding help: https://en.wikipedia.org/wiki/Percent-encoding
                See: https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets
            </remarks>
            <param name="screenName">
                The screen name / Twitter handle / user name that you want
            </param>
            <param name="listName">
                The name of the list as defined by the user (e.g., 'Baseball')
            </param>
            <param name="searchString">
                The term or terms that you want to search for
            </param>
            <param name="numberOfResultsToReturn">
                The number of tweets you want returned
            </param>
            <example>
                string fullSearchString = CreateSearchStringToSearchListFor("mr_baseball", "baseball", "mookie", 100);
            </example>
            <returns>
                string
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.GetJObjectOfTweetsFromListFiltered(System.String,System.String,System.String,System.Int32)">
            <summary>
                Gets JObject with all tweet info(i.e., text from tweet) from Twitter list based on searchString
            </summary>
            <remarks>
                Uses tweetinvi to execute the search
                Uses 'CreateSearchStringToSearchListFor' to generate search string within method
                Used within 'GetJTokenOfAllTweetTextInJObject' method
                See: https://github.com/linvi/tweetinvi/wiki/Custom-Queries
            </remarks>
            <param name="screenName">
                The screen name / Twitter handle / user name that you want
            </param>
            <param name="listName">
                The name of the list as defined by the user (e.g., 'Baseball')
            </param>
            <param name="searchString">
                The term or terms that you want to search for
            </param>
            <param name="numberOfResultsToReturn">
                The number of tweets you want returned
            </param>
            <example>
                JObject jsonObject = GetJObjectOfTweetsFromListFiltered("mr_baseball", "baseball", "mookie", 100);
            </example>
            <returns>
                JObject
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.GetJTokenOfAllTweetTextInJObject(System.String,System.String,System.String,System.Int32)">
            <summary>
                Gets JToken with all tweet info(i.e., text from tweet) from Twitter list based on searchString
            </summary>
            <remarks>
                Uses tweetinvi to execute the search
                Uses 'GetJObjectOfTweetsFromListFiltered' to generate JObject within method
                Used within 'GetListOfAllTweetsFullTextInJToken' and 'GetListOfITweetsInJToken' methods
                See: https://github.com/linvi/tweetinvi/wiki/Custom-Queries
            </remarks>
            <param name="screenName">
                The screen name / Twitter handle / user name that you want
            </param>
            <param name="listName">
                The name of the list as defined by the user (e.g., 'Baseball')
            </param>
            <param name="searchString">
                The term or terms that you want to search for
            </param>
            <param name="numberOfResultsToReturn">
                The number of tweets you want returned
            </param>
            <example>
                JToken allStatusesJToken = GetJTokenOfAllTweetTextInJObject("mr_baseball", "baseball", "mookie", 100);
            </example>
            <returns>
                JToken
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.GetListOfAllTweetsFullTextInJToken(System.String,System.String,System.String,System.Int32)">
            <summary>
                Gets "full_text" (i.e., text from tweet) from Twitter list based on searchString
            </summary>
            <remarks>
                Uses tweetinvi to execute the search
                Uses 'GetJTokenOfAllTweetTextInJObject' to generate JToken within method
                See: https://github.com/linvi/tweetinvi/wiki/Custom-Queries
            </remarks>
            <param name="screenName">
                The screen name / Twitter handle / user name that you want
            </param>
            <param name="listName">
                The name of the list as defined by the user (e.g., 'Baseball')
            </param>
            <param name="searchString">
                The term or terms that you want to search for
            </param>
            <param name="numberOfResultsToReturn">
                The number of tweets you want returned
            </param>
            <example>
                var list = GetListOfAllTweetsFullTextInJToken("mr_baseball", "baseball", "mookie", 100);
            </example>
            <returns>
                List of tweets
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.GetListOfITweetsInJToken(System.String,System.String,System.String,System.Int32)">
            <summary>
                Gets multiple ITweets from Twitter list based on searchString
            </summary>
            <remarks>
                Uses tweetinvi to execute the search
                Uses 'GetJTokenOfAllTweetTextInJObject' to generate JToken within method
                See: https://github.com/linvi/tweetinvi/wiki/Custom-Queries
            </remarks>
            <param name="screenName">
                The screen name / Twitter handle / user name that you want
            </param>
            <param name="listName">
                The name of the list as defined by the user (e.g., 'Baseball')
            </param>
            <param name="searchString">
                The term or terms that you want to search for
            </param>
            <param name="numberOfResultsToReturn">
                The number of tweets you want returned
            </param>
            <example>
                var list = GetListOfITweetsInJToken("mr_baseball", "baseball", "mookie", 100);
            </example>
            <returns>
                List of Tweetinvi.Models.ITweets
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.GetAllTweetsFromTwitterList(System.String,System.String)">
            <summary>
                Gets last X? tweets from one Twitter list
            </summary>
            <remarks>
                Uses tweetinvi to get the list and then tweets in that list
                Note that this does not filter any of the tweets returned (see next method for that)
                See: https://github.com/linvi/tweetinvi/wiki/Twitter-Lists
            </remarks>
            <param name="listName">
                The name of the list as defined by the user (e.g., 'Baseball')
            </param>
            <param name="screenName">
                The screen name / Twitter handle / user name that you want
            </param>
            <example>
                var tweets = GetAllTweetsFromTwitterList("baseball", "mr_baseball");
            </example>
            <returns>
                IEnumerable of Tweetinvi.Models.ITweets
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.GetTweetsFromTwitterListAfterSinceId(System.String,System.String,System.Boolean)">
            <summary>
                Gets last X tweets from one Twitter list based on filters set in search and current sinceId
            </summary>
            <remarks>
                Uses tweetinvi to get the list, then tweets in that list, and then filters the tweets
                Note that this DOES filter any of the tweets returned (see previous method for no filters)
                See: https://github.com/linvi/tweetinvi/wiki/Twitter-Lists
            </remarks>
            <param name="listName">
                The name of the list as defined by the user (e.g., 'Baseball')
            </param>
            <param name="screenName">
                The screen name / Twitter handle / user name that you want
            </param>
            <param name="includeRetweets">
                True if you want to include retweets; False if you don't;
            </param>
            <example>
                var tweets = GetTweetsFromTwitterListAfterSinceId("baseball", "mr_baseball", false);
            </example>
            <returns>
                IEnumerable of Tweetinvi.Models.ITweets
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.GetAllMembersOfTwitterList(System.String,System.String)">
            <summary>
                Gets list of twitter IUsers that are members of a Twitter list
            </summary>
            <remarks>
                Uses tweetinvi to get ITwitterList list
                See: https://github.com/linvi/tweetinvi/wiki/Twitter-Lists
            </remarks>
            <param name="listName">
                The name of the list as defined by the user (e.g., 'Baseball')
            </param>
            <param name="screenName">
                The screen name / Twitter handle / user name that you want
            </param>
            <example>
                var members = GetAllMembersOfTwitterList("baseball","mr_baseball");
            </example>
            <returns>
                IEnumerable of IUsers
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.GetAllUserIdsForMembersOfTwitterList(System.String,System.String)">
            <summary>
                Gets list of twitter user ids that are members of a Twitter list
            </summary>
            <remarks>
                Uses tweetinvi to get all Twitter list members; then filters for just user ids
                Works with support from 'GetAllMembersOfTwitterList' method
                See: https://github.com/linvi/tweetinvi/wiki/Twitter-Lists
            </remarks>
            <param name="listName">
                The name of the list as defined by the user (e.g., 'Baseball')
            </param>
            <param name="screenName">
                The screen name / Twitter handle / user name that you want
            </param>
            <example>
                var listOfLongs = GetAllUserIdsForMembersOfTwitterList("baseball","mr_baseball");
            </example>
            <returns>
                List of twitter user ids of users within Twitter List
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.AddUserIdsToList(System.Collections.Generic.IEnumerable{Tweetinvi.Models.IUser},System.Collections.Generic.List{System.Int64})">
            <summary>
                Support method for 'GetAllUserIdsForMembersOfTwitterList' method
                Gets all user ids from given IUsers and adds them to List
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.WriteSinceIdToTxtFile(System.Int64)">
            <summary>
                Writes a given value / long (i.e., sinceId) to text file within Configuration folder
                It also write date and time the value / long is added
            </summary>
            <remarks>
                This connects to 'twitterSinceId.txt' file
                See: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/file-system/how-to-write-to-a-text-file
                From Twitter:
                    * Returns tweets w/ Ids > (that is, more recent than) the specified ID.
                    * There are limits to # of Tweets which can be accessed through the API.
                    * If the limit of Tweets is hit, since_id will use oldest ID available.
                See: https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets
            </remarks>
            <param name="sinceId">
                Last id of all tweets previously searched
                Future searches should stop once they hit the sinceId since you've already searched those
            </param>
            <example>
                WriteSinceIdToTxtFile(999999999999111111);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.ReadCurrentSinceIdFromTxtFile">
            <summary>
                Reads most recent since tweet id from text file within Configuration folder
            </summary>
            <remarks>
                This connects to 'twitterSinceId.txt' file
                See: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/file-system/how-to-read-a-text-file-one-line-at-a-time
            </remarks>
            <example>
                var currentSinceId = ReadCurrentSinceIdFromTxtFile()
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.RunPreCheck">
            <summary>
                From tweetinvi:
                "Tweetinvi events are global events that can be used to gain more control and debug over what Tweetinvi does for you."
            </summary>
            <remarks>
                From tweetinvi:
                    * Checks which requests will be performed through Tweetinvi
                More importantly it allows developers to modify or cancel a WebRequest"
                See: https://github.com/linvi/tweetinvi/wiki/Tweetinvi-Events
            </remarks>
        </member>
        <member name="M:BaseballScraper.Controllers.TwitterControllers.TwitterTweetinviController.RunPostCheck">
            <summary>
                From tweetinvi:
                "Tweetinvi events are global events that can be used to gain more control and debug over what Tweetinvi does for you."
            </summary>
            <remarks>
                From tweetinvi:
                    * Checks if a query was successful and what it returned
                See: https://github.com/linvi/tweetinvi/wiki/Tweetinvi-Events
            </remarks>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Collections.YahooPlayersCollectionController.FilterByPlayerNameThenCreateInstance(System.String)">
            <summary>
                Query yahoo players collection with various filters
                Each below is one (e.g., filter by player name) or a combo of filters (e.g., filter by player name, and position, and status)
                See 'filter options' #region to view options for each of the filter types (e.g., status, )
            </summary>
            <example>
               var collection = FilterByPlayerNameThenCreateInstance("smith"); OR
               var player = FilterByPlayerNameThenCreateInstance("bryant");
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Collections.YahooPlayersCollectionController.FilterByPlayerNameAndPositionThenCreateInstance(System.String,System.String)">
            <example>
               var collection = FilterByPlayerNameAndPositionThenCreateInstance("smith","SP");
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Collections.YahooPlayersCollectionController.FilterByPositionThenCreateInstance(System.String)">
            <example>
               var collection = FilterByPositionThenCreateInstance("3B");
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Collections.YahooPlayersCollectionController.FilterByPositionWithSortThenCreateInstance(System.String,System.String)">
            <example>
               var collection = FilterByPositionWithSortThenCreateInstance("3B","OR");
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Collections.YahooPlayersCollectionController.FilterByPositionAndStatusWithSortThenCreateInstance(System.String,System.String,System.String)">
            <example>
                var collection = FilterByPositionAndStatusWithSortThenCreateInstance("3B","FA","OR");
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Collections.YahooPlayersCollectionController.FilterByPositionAndStatusWithSortForLastWeekThenCreateInstance(System.String,System.String)">
            <example>
                var collection = FilterByPositionAndStatusWithSortForLastWeekThenCreateInstance("3B","FA");
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Collections.YahooPlayersCollectionController.FilterByPositionAndStatusWithSortForLastMonthThenCreateInstance(System.String,System.String)">
            <example>
               var collection = FilterByPositionAndStatusWithSortForLastMonthThenCreateInstance("3B","FA");
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Collections.YahooPlayersCollectionController.FilterByPositionAndStatusWithSortForTodayThenCreateInstance(System.String,System.String)">
            <example>
               var collection = FilterByPositionAndStatusWithSortForTodayThenCreateInstance("3B","FA");
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Collections.YahooPlayersCollectionController.FilterByPositionAndStatusThenCreateInstance(System.String,System.String)">
            <example>
                var collection = FilterByPositionAndStatusThenCreateInstance("3B","FA");
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Collections.YahooPlayersCollectionController.FilterByPositionStatusAndCountThenCreateInstance(System.String,System.String,System.String)">
            <example>
               var collection = FilterByPositionStatusAndCountThenCreateInstance("3B","FA","10");
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Collections.YahooPlayersCollectionController.CreatePlayerListFromPlayersCollection(BaseballScraper.Models.Yahoo.Collections.YahooPlayersCollection)">
            <example>
               var collection = FilterByPositionWithSortThenCreateInstance("3B","OR");
               var listOfPlayers = CreatePlayerListFromPlayersCollection(collection);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Collections.YahooPlayersCollectionController.CreatePlayerListFromPlayers(BaseballScraper.Models.Yahoo.Collections.Players)">
            <example>
                var collection = FilterByPositionWithSortThenCreateInstance("3B","OR");
                var collectionPlayers = collection.Players;
                var listPlayer = CreatePlayerListFromPlayers(collectionPlayers);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Collections.YahooPlayersCollectionController.CreatePlayersCollectionInstance(System.String)">
            <summary>
                Used by the various methods about to generate the actual players collection based on the filters of those methods
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooPlayerResourceController.CreateYahooPlayerResourceInstances(System.String)">
            <summary>
                Instantiate new instance of yahoo player resource
            </summary>
            <param name="yahooPlayerId">
                The Mlb players yahoo player id
                Typically four or five numbers but fed to method as a string
                    E.g., "8967" instead of 8967
            </param>
            <remarks>
                If you do not know the yahoo id, try the 'GetYahooPlayersIdFromPlayerName()' method to get it
            </remarks>
            <example>
                var yahooPlayerResourceModel = CreateYahooPlayerResourceInstances("8967");
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooPlayerResourceController.CreateListOfYahooPlayerResourceInstances(System.Collections.Generic.List{System.String})">
            <summary>
                Instantiate multiple instances of yahoo player resource
            </summary>
            <example>
                string rizzoId = "8868";
                string goldschmidtId = "8967";
                var playerIds = new List string
                {
                    rizzoId,
                    goldschmidtId
                };
                var playerList = CreateListOfYahooPlayerResourceInstances(playerIds);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooPlayerResourceController.GetYahooPlayersIdFromPlayerName(System.String)">
            <summary>
                Retrieves yahoo player id from player's yahoo name
                This is helpful with primary methods if you do not know the player's yahoo id
            </summary>
            <example>
                var playerId = GetYahooPlayersIdFromPlayerName("Anthony Rizzo");
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooRosterResourceController.AddPlayersForOneRosterToGoogleSheetAsync(System.Int32,System.String,System.String)">
            <summary>
                Add all players for one roster to a google sheet
            </summary>
            <param name="teamNumber">
                A number 0 - X; Where X is the total number of teams in the league;
                Basically every manager has their own single number Id;
                Select the Id of the Manager you would want to view
            </param>
            <param name="tabName">
                The name of the tab that you want to write the data to
            </param>
            <param name="gSheetsDocumentName">
                This is from the 'gSheetNames.json' file in config data
                It's the Value for Key = "DocumentName"
            </param>
            <example>
                await AddPlayersForOneRosterToGoogleSheetAsync(1, "roster_import_test", "SheetsTestDoc")
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooRosterResourceController.AddPlayersForAllLeagueRostersToGoogleSheetAsync(System.Int32,System.String,System.String)">
            <summary>
                This is the same as the 'AddPlayersForOneRosterToGoogleSheetAsync()' method but for all teams
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooRosterResourceController.CreateYahooRosterResourceInstance(System.Int32)">
            <summary>
                Instantiate new instance of yahoo roster resource
            </summary>
            <param name="teamNumber">
                A number 0 - X; Where X is the total number of teams in the league;
                Basically every manager has their own single number Id;
                Select the Id of the Manager you would want to view
            </param>
            <example>
                var yahooRosterResourceInstance = CreateYahooRosterResourceInstance(1);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooRosterResourceController.CreateRosterResourceJObject(System.Int32)">
            <summary>
                Same as 'CreateYahooRosterResourceInstance()' but stops short of converting object to token then instance
            </summary>
            <param name="teamNumber">
                A number 0 - X; Where X is the total number of teams in the league;
                Basically every manager has their own single number Id;
                Select the Id of the Manager you would want to view
            </param>
            <example>
                var rosterResource = CreateRosterResourceJObject(6);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooRosterResourceController.CreateYahooRosterResourceJToken(System.Int32)">
            <summary>
                Same as 'CreateYahooRosterResourceInstance()' but stops short of converting object to instance
            </summary>
            <param name="teamNumber">
                A number 0 - X; Where X is the total number of teams in the league;
                Basically every manager has their own single number Id;
                Select the Id of the Manager you would want to view
            </param>
            <example>
                var rosterResource = CreateYahooRosterResourceJToken(6);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooRosterResourceController.CreateListOfYahooRostersForAllTeams(System.Int32)">
            <summary>
                Create list of YahooRosterResource instances for all leagues in team
            </summary>
            <param name="numberOfTeamsInLeague">
                A number 0 - X; Where X is the total number of teams in the league;
                Basically every manager has their own single number Id;
                Select the Id of the Manager you would want to view
            </param>
            <example>
                var roster = CreateListOfYahooRostersForAllTeams(10);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooRosterResourceController.CreateListOfPlayersOnRoster(System.Int32)">
            <summary>
                Create list of Players on one manager's roster
            </summary>
            <example>
                var rosterResourceToken = CreateRosterResourceJToken(6);
                var listOfPlayers = CreateListOfPlayersOnRoster(rosterResourceToken);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooRosterResourceController.CreateListOfPlayersAllRosters(System.Int32)">
            <summary>
                Creates list of Players for all managers in league
            </summary>
            <example>
                var roster  = CreateListOfPlayersAllRosters(10);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooRosterResourceController.GetMangersForRoster(System.Int32)">
            <summary>
                Create instance of manager for one team in league
            </summary>
            <remarks>
                This might break if there are co-managers; haven't tested that yet though
            </remarks>
            <example>
                var managers = GetManagersForRoster(8);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooRosterResourceController.CreateListOfManagersForAllRosters(System.Int32)">
            <summary>
                Create instance of manager all teams in league
            </summary>
            <remarks>
                This might break if there are co-managers; haven't tested that yet though
            </remarks>
            <example>
                var managersList = CreateListOfManagersForAllRosters(10);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooRosterResourceController.AddAllPlayerModelPropertiesAsHeadersInGoogleSheet(System.Collections.Generic.List{System.Collections.Generic.IList{System.Object}})">
            <summary>
                Create a list of headers of all available data in Yahoo Roster Resource json
                This differs from next method as that method is a refined version of the headers you want
            </summary>
            <example>
                AddAllPlayerModelPropertiesAsHeadersInGoogleSheet(listOfLists);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooRosterResourceController.AddMostRelevantRosterPropertiesAsHeadersInGoogleSheet(System.Collections.Generic.List{System.Collections.Generic.IList{System.Object}})">
            <summary>
                Create a list of selected headers
                This differs from the previous method as previous method gets you all headers
            </summary>
            <example>
                AddMostRelevantRosterPropertiesAsHeadersInGoogleSheet(listOfLists);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooTeamResourceController.CreateYahooTeamResourceInstance(System.Int32)">
            <summary>
                Create instance of yahoo team model; save it to the database
            </summary>
            <param name="managerId">
                A number 0 - X; Where X is the total number of teams in the league;
                Basically every manager has their own single number Id;
                Select the Id of the Manager you would want to view
            </param>
            <example>
                var teamBase = CreateYahooTeamResourceInstance(7);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooTeamResourceController.CreateYahooTeamResourceInstanceFromUrl(System.Int32)">
            <summary>
                This is the same thing as 'CreateYahooTeamBaseModel()' method except mgr id passed in in url
                See 'CreateYahooTeamBaseModel()' method for comments for code within method
            </summary>
            <param name="managerId">
                A number 0 - X; Where X is the total number of teams in the league;
                Basically every manager has their own single number Id;
                Append team member to end of controller url
            </param>
            <example>
               https://127.0.0.1:5001/api/yahoo/yahooteamresource/1
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooTeamResourceController.CreateListOfAllTeamBasesForLeague(System.Int32)">
            <summary>
                Create a list of team bases for all teams in league
                Relies on the 'CreateYahooTeamBaseModel()' method to instantiate each Yahoo TeamBase
            </summary>
            <param name="NumberOfTeams">
                The total number of teams in the league
                Assumes 1 manager per team; if a team is co-managed it just gives you one mgr for that team
            </param>
            <example>
                var listOfTeamBases = CreateListOfAllTeamBasesForLeague(10);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooTeamResourceController.CreateYahooTeamResourceHashTable(System.Int32)">
            <summary>
                Create hashtable of YahooTeamBase items for a given team=
            </summary>
            <param name="managerId">
                A number 0 - X; Where X is the total number of teams in the league;
                Basically every manager has their own single number Id;
                Select the Id of the Manager you would want to view
            </param>
            <example>
              var teamBase = CreateYahooTeamResourceHashTable(1);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooTeamResourceController.PopulateInitialTeamResourceInstanceProperties(BaseballScraper.Models.Yahoo.Resources.YahooTeamResource,Newtonsoft.Json.Linq.JObject)">
            <summary>
                Set initial properties that all Team Bases have in common
                Other properties are set in either of
                1) 'PopulateTeamBaseWithOneManager()' or
                2) 'PopulateTeamBaseWithCoManagers()' methods
                This is ultimately called in the 'CreateYahooTeamBaseModel()' method
            </summary>
            <remarks>
                Note that the code below is formated / indented to give an idea how the json looks
            </remarks>
            <example>
                PopulateInitialTeamBaseProperties(tB, resourceJson);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooTeamResourceController.PopulateTeamResourceInstanceWithOneManager(BaseballScraper.Models.Yahoo.Resources.YahooTeamResource,Newtonsoft.Json.Linq.JToken)">
            <summary>
                If the team only has one manager, populate remaining properties with this code
                If there are two managers, populate properties with 'PopulateTeamBaseWithCoManagers()'
                This is ultimately called in the 'CreateYahooTeamBaseModel()' method
            </summary>
            <example>
                PopulateTeamResourceInstanceWithOneManager(tB, managerPath);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.Resources.YahooTeamResourceController.PopulateTeamBaseWithCoManagers(BaseballScraper.Models.Yahoo.Resources.YahooTeamResource,Newtonsoft.Json.Linq.JToken,System.Collections.Generic.List{BaseballScraper.Models.Yahoo.YahooManager})">
            <summary>
                If the team has co-managers, populate remaining properties with this code
                If the team only has one manager, populate remaining properties with 'PopulateTeamBaseWithOneManager()' method
                This is ultimately called in the 'CreateYahooTeamBaseModel()' method
            </summary>
            <example>
                PopulateTeamBaseWithCoManagers(tB, managerPath, teamManagersList);
            </example>
            <returns>
                A List of YahooManagers with manager details for each of the co-managers
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooManagerController.CreateYahooManagerModel(System.Int32)">
            <summary>
                Instantiate new instance of a yahoo manager
                The manager data in the requested json is found nested under league standings
            </summary>
            <param name="managerId">
                A number 0 - X; Where X is the total number of teams in the league;
                Basically every manager has their own single number Id;
                Select the Id of the Manager you would want to view
            </param>
            <example>
                var yahooManager = CreateYahooManagerModel(1);
            </example>
            <returns>
                A new YahooManager
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooManagerController.CreateYahooManagerModelFromUrl(System.Int32)">
            <summary>
                This is the same thing as 'GetYahooManagerModel()' method except managerId is passed in through url
            </summary>
            <example>
                https://127.0.0.1:5001/api/yahoo/yahoomanager/1
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooManagerController.GetListOfAllManagersInLeague(System.Int32)">
            <summary>
                Create a list of all yahoo managers in the league
                The manager data in the requested json is found nested under league standings
                Relies on the 'CreateYahooManagerModel()' method to instantiate each Yahoo Managers
            </summary>
            <param name="NumberOfTeams">
                The total number of teams in the league
                Assumes 1 manager per team; if a team is co-managed it just gives you one mgr for that team
            </param>
            <example>
                var listOfManagers = GetListOfAllManagersInLeague(10);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooScoreboardController.ViewLeagueScoreboardAsync">
            <example> https://127.0.0.1:5001/api/yahoo/scoreboard </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooTeamPointsController.CreateYahooTeamPointsModel">
            <summary> Create new instance of YahooTeamPoints model </summary>
            <example> https://127.0.0.1:5001/api/yahoo/teampoints/season </example>
            <returns> Instance of YahooTeamPoints model; includes CoverageType, WeekOrYear, and Total points </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooTeamPointsController.CreateYahooTeamPointsModel(System.Int32,Newtonsoft.Json.Linq.JObject)">
            <summary> Create new instance of YahooTeamPoints model </summary>
            <param name="teamId"> A number between 0 and the total number of teams in the league with each number in between representing one of the teams (i.e., each team has its own unique team id number) </param>
            <param name="o"> An object that contains the json needed to instantiate new instance of YahooTeamPoints model</param>
            <returns> Instance of YahooTeamPoints model; includes CoverageType, WeekOrYear, and Total points  </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooTeamPointsController.ViewTeamPoints">
            <summary> This allows viewing / testing of Option 2; The method is called and a team id and a JObject are passed parameters </summary>
            <example> https://127.0.0.1:5001/api/yahoo/teampoints </example>
            <returns> A view of points for a selected team </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooTeamStandingController.CreateYahooTeamStandingModel">
            <summary> Return instantiated 'YahooTeamStanding' </summary>
            <example> https://127.0.0.1:5001/api/yahoo/teamstanding </example>
            <returns> rank, playoff seed, games back, wins, losses, ties, winning percentage </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooTeamStatsController.CreateYahooTeamStatsModel">
            <summary>
                Create new instance of YahooTeamStats Model
                Show full season stats for one team
            </summary>
            <remarks>
                This is the least helpful option of the method
                Within Option 1, the 'teamId' is defined within the method itself
                To change the team Id you're searching for, change the 'teamId' variable;
                Includes: H/AB, R, HR, RBI, SB, BB, IP, W, SV, H, ERA, WHIP
                Relies on 'PopulateTeamStatsProperties()' to populate model properties
            </remarks>
            <example>
                https://127.0.0.1:5001/api/yahoo/teamstats
            </example>
            <returns>
                New YahooTeamStatsModel
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooTeamStatsController.CreateYahooTeamStatsModel(System.Int32)">
            <summary>
                Create new instance of YahooTeamStats Model
                Show full season stats for one team
            </summary>
            <remarks>
                Within Option 2, 'teamId' is passed in method
                This option must be called by another method
                To change the team you want to view the stats for, change the id number you are passing when calling the method
                Includes: H/AB, R, HR, RBI, SB, BB, IP, W, SV, H, ERA, WHIP
                Relies on 'PopulateTeamStatsProperties()' to populate model properties
            </remarks>
            <param name="teamId">
                A number between 0 and the total number of teams in the league (i.e., each team has its own unique team id number)
            </param>
            <example>
                var tsModel = CreateYahooTeamStatsModel(1)
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooTeamStatsController.CreateYahooTeamStatsModelFromUrl(System.Int32)">
            <summary>
                Create new instance of YahooTeamStats Model
                Show full season stats for one team
            </summary>
            <remarks>
                Within Option 3, there are two parameters.
                To change the team you are searching for, change the team id within the url itself
                Includes: H/AB, R, HR, RBI, SB, BB, IP, W, SV, H, ERA, WHIP
                Relies on 'PopulateTeamStatsProperties()' to populate model properties
            </remarks>
            <param name="teamId">
                 A number between 0 and the total number of teams in the league (i.e., each team has its own unique team id number)
            </param>
            <example>
                https://127.0.0.1:5001/api/yahoo/yahooteamstats/2
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooTeamStatsController.CreateListOfAllYahooTeamStatsListsForLeague(System.Int32)">
            <summary>
                Create a list of team total stats for all teams in league for the season
                Relies on the 'CreateYahooTeamStatsModel()' method to instantiate each Yahoo Team Stats List
            </summary>
            <param name="NumberOfTeams">
                The total number of teams in the league
                Assumes 1 manager per team; if a team is co-managed it just gives you one mgr for that team
            </param>
            <example>
                var listOfTeamStats = CreateListOfAllYahooTeamStatsListsForLeague(10);
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooApiRequestController.GetYahooMlbGameKeyForThisYear">
            <summary>
                The yahoo game id for mlb changes each season
                This method gets the id for the current year
                Method is ultimately called in 'GetTheGameIsTheGameLeagueKey' method
            </summary>
            <returns>
                A string that is three numbers
                e.g., 378 OR 388
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooApiRequestController.GetTheGameIsTheGameLeagueKeySuffix">
            <summary>
                Each yahoo league has a unique id
                This method gets the id for the league you want data from
                The league key suffix is in a config file
                Method is ultimately called in 'GetTheGameIsTheGameLeagueKey' method
            </summary>
            <returns>
                A string of lowercase L + the league id
                e.g., l.1234 OR l.679
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooApiRequestController.GetTheGameIsTheGameLeagueKey">
            <summary>
                To get league day you need the league key
                The league key is a combo of the mlb game key and the league suffix
                Methods calls the two previous methods (STEP 1 and STEP 2)
            </summary>
            <returns>
                A string that is the Y! mlb game key and the league suffix
                e.g., 378.l.1234 OR 388.l.679
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooApiRequestController.GenerateWebRequest(System.String)">
            <summary>
                Generates the web request using a yahoo api endpoint.
                Followed by 'GetResponseFromServer()' Method
                It is ultimatelly called within 'GenerateYahooResourceJObject()' Method
            </summary>
            <param name="uri">
                Endpoint of the yahoo data / json that you want
            </param>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooApiRequestController.GetResponseFromServer(System.Net.HttpWebRequest)">
            <summary>
                It receives the response from the request and returns a string of xml
                Follows 'GenerateWebRequest()' method.
                Followed by the 'TranslateServerResponseToXml()' Method.
                It is ultimatelly called within 'GenerateYahooResourceJObject()' Method
            </summary>
            <param name="request">
                The HttpWebRequest generated in 'GenerateWebRequest()' Method
            </param>
            <returns>
                A serverResponse string that looks like Xml (i.e., it's not actually xml)
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooApiRequestController.TranslateServerResponseToXml(System.String)">
            <summary>
                Generate xml from serverResponse string.
                Follows the 'GetResponseFromServer()' Method
                It is ultimatelly called within 'GenerateYahooResourceJObject()' Method
            </summary>
            <param name="serverResponse">
                String generated in the 'GetResponseFromServer()' Method
            </param>
            <returns>
                Xml document with the Yahoo fantasy data
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooApiRequestController.GenerateYahooResourceJObject(System.String)">
            <summary>
                Generate json for any given yahoo resource (e.g., game, league, player, team, etc.)
            </summary>
            <param name="uri">
                Endpoint of the yahoo data / json that you want
            </param>
            <returns>
                Json data (i.e., a JObject) of the fantasy data requested
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooApiRequestController.SaveObjectToDatabase(System.Object)">
            <summary>
                Take in an instance of a yahoo model and save it to the database
            </summary>
            <param name="yahoomodel"></param>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooAuthController.CheckIfUserHasExistingRefreshToken">
            <summary>
                Check if user has existing refresh token
                If they do have an RT, they have already authorized the app; If they do not they must authorize it
                    PATH 1: Authorize for first time
                    PATH 2: User is already authorized
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooAuthController.GenerateUserAuthorizationCode">
            <summary>
            * Triggers browser to open window asking user to authorize usage of their data in the app.
            * When the user approves, they will receive a short authorization code.
            * This code should then be entered in the terminal
            * This is applicable to a first time user (i.e., a user w/o a refresh token)
            </summary>
            <returns>
                AuthorizationCode which is a string entered in the console
            </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooAuthController.CreateYahooAccessTokenResponseJObject">
            <summary>
                Generate the 'request' for authorization / Then convert it to a JObject
                This is for brand new users as it calls the 'GenerateUserAuthorizationCode()' method
                This is applicable to a first time user (i.e., a user w/o a refresh token)
            </summary>
            <returns> The HttpWebRequest for authorization converted to a JObject </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooAuthController.CreateYahooAccessTokenRequest">
            <summary>
            * Generate the HttpWebRequest for authorization
            * This is for brand new users as it calls the 'GenerateUserAuthorizationCode()' method
            * This is applicable to a first time user (i.e., a user w/o a refresh token)
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooAuthController.ExchangeRefreshTokenForNewAccessTokenJObject">
            <summary>
                If user has a refresh token, this is the path
                Yahoo API auth process step 5: 'Exchange refresh token for new access token'
                Yahoo description: After the access token expires, you can use the refresh token, which has a long lifetime, to get a new access token.
                For notes / comments on this method check it's 'sister' method (CreateYahooAccessTokenResponseJObject) in
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooAuthController.ExchangeRefreshTokenForNewAccessToken">
            <summary>
                This is a condensed version of 'ExchangeRefreshTokenForNewAccessTokenJObject()' and returns a HttpWebRequest instead of a JObject
                If user has a refresh token, this is the path
                Yahoo API auth process step 5: 'Exchange refresh token for new access token'
                Yahoo description: After the access token expires, you can use the refresh token, which has a long lifetime, to get a new access token.
                For notes / comments on this method check it's 'sister' method (CreateYahooAccessTokenResponseJObject) in
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooAuthController.ExchangeRefreshTokenStringbuilder(System.String,System.String,System.String,System.String,System.String)">
            <summary>
                Stringbuilder for:
                1) ExchangeRefreshTokenForNewAccessTokenJObject()
                2) ExchangeRefreshTokenForNewAccessToken()
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooAuthController.ExchangeRefreshTokenRequestAppender(System.Net.HttpWebRequest,System.String,System.String)">
            <summary>
                Appends multiple things to HttpWebRequest for methods:
                1) ExchangeRefreshTokenForNewAccessTokenJObject()
                2) ExchangeRefreshTokenForNewAccessToken()
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooAuthController.GetYahooAccessTokenResponse">
            <summary>
                Retrieve response from Yahoo.
                Create a new instance of AccessTokenResponse from yahoo response
            </summary>
            <returns> A new AccessTokenResponse that includes: AccessToken, TokenType, ExpiresIn, RefreshToken, XOAuthYahooGuid</returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooAuthController.GenerateYahooAccessTokenResponse(Newtonsoft.Json.Linq.JObject)">
            <summary>
                Receives a JObject, takes that information, and turns it into an AccessTokenResponse
                Called 2x within:  'GetYahooAccessTokenResponse()'
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooAuthController.SetSessionAuthorizationCode(System.String)">
            <summary>
                Takes the authorization code and sets it within session
                This is called within the GenerateUserAuthorizationCode method
                This method / step is not required
            </summary>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooTransactionTrendsController.SetSearchDate(System.String,System.String,System.String)">
            <summary> Sets a query url for a specific date </summary>
            <param name="fourDigitYear"> string year e.g. "2018" </param>
            <param name="twoDigitMonth"> string month e.g. "10" </param>
            <param name="twoDigitDay"> string day e.g. "08" </param>
            <example> var urlToScrape = SetSearchDate("2018", "10" "01"); </example>
            <returns> A concatenated string of the url to scrape </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooTransactionTrendsController.SetSearchDateAsToday">
            <summary> Sets date as today's date to be added to search query url </summary>
            <returns> A concatenated string of the url to scrape </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooTransactionTrendsController.GenerateList(HtmlAgilityPack.HtmlDocument)">
            <summary> Generates a list of trends given a specific Html page </summary>
            <remarks> This method is used by all methods in the 'Get Trends' Region </remarks>
            <param name="thisUrlsHtml"> The html to scrape </param>
            <returns> A list of trends of YahooTransactionTrendsPlayers </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooTransactionTrendsController.GetTrendsForTodayAllPositions">
            <summary> Get trends for all positions for today's dates </summary>
            <example> GetTrendsForTodayAllPositions(); </example>
            <returns> A list of YahooTransactionTrendsPlayer --> Name, Drops, Adds, Trades, Total </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooTransactionTrendsController.GetTrendsForTodayOnePosition(System.String)">
            <summary> Get trends for one position for today's date </summary>
            <param name="positionShort"> Shortened position string ("1B", "2B", "3B", "SS", "OF", "P", "SP", "RP", "C", "Util")</param>
            <example> GetTrendsForTodayOnePosition("QB"); </example>
            <returns> A list of YahooTransactionTrendsPlayer --> Name, Drops, Adds, Trades, Total </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooTransactionTrendsController.GetTrendsForDateAllPositions(System.String,System.String,System.String)">
            <summary> Get trends for all positions for a specific date </summary>
            <param name="fourDigitYear"> string year e.g. "2018" </param>
            <param name="twoDigitMonth"> string month e.g. "10" </param>
            <param name="twoDigitDay"> string day e.g. "08" </param>
            <example> GetTrendsForDateAllPositions("2018", "10", "01"); </example>
            <returns> A list of YahooTransactionTrendsPlayer --> Name, Drops, Adds, Trades, Total </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooTransactionTrendsController.GetTrendsForDateOnePosition(System.String,System.String,System.String,System.String)">
            <summary> Get trends for one position for a specific date </summary>
            <param name="fourDigitYear"> string year e.g. "2018" </param>
            <param name="twoDigitMonth"> string month e.g. "10" </param>
            <param name="twoDigitDay"> string day e.g. "08" </param>
            <param name="positionShort"> Shortened position string ("1B", "2B", "3B", "SS", "OF", "P", "SP", "RP", "C", "Util")</param>
            <example> GetTrendsForDateOnePosition("2018", "10", "01", "QB"); </example>
            <returns> A list of YahooTransactionTrendsPlayer --> Name, Drops, Adds, Trades, Total </returns>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooTransactionTrendsController.AddTrendsToGoogleSheets(System.String,System.String,System.String)">
            <example>
            AddTrendsToGoogleSheets("YAHOO_TRENDS","A1:Z1000","CoreCalculator")
            </example>
        </member>
        <member name="M:BaseballScraper.Controllers.YahooControllers.YahooTransactionTrendsController.AddTrendsToGoogleSheetsAsync(System.String,System.String,System.String)">
            <example>
            await AddTrendsToGoogleSheetsAsync("YAHOO_TRENDS","A1:Z1000","CoreCalculator")
            </example>
        </member>
        <member name="T:BaseballScraper.LahmanControllers.LahmanCsvController">
            <summary> Methods to read and get records from the Lahman database / csv files </summary>
            <remarks> Files will need to be updated after each Mlb season </remarks>
            <remarks> There are many more Lahman csv files; those are not included at this point; </remarks>
            <list> RESOURCES
                <item> Lahman Csv File Descriptions
                    <description> http://www.seanlahman.com/files/database/readme58.txt </description>
                </item>
            </list>
            <list> LAHMAN CSV FILES
                <item> Appearances </item>
                <item> Batting </item>
                <item> Parks </item>
                <item> People </item>
                <item> Pitching </item>
                <item> Teams </item>
            </list>
        </member>
        <member name="M:BaseballScraper.LahmanControllers.LahmanCsvController.RunLahmanFunction">
            <summary> Call non-async function to read a lahman csv file </summary>
            <remarks> You would only be calling one of the included six functions at a time; all six included below for ease / consolidation </remarks>
        </member>
        <member name="M:BaseballScraper.LahmanControllers.LahmanCsvController.GetAllLahmanCsvFileRecords(System.String)">
            <summary> Read a lahman csv file non-async </summary>
            <param name="filePath"> One of the six Lahman csv file paths </param>
        </member>
        <member name="M:BaseballScraper.LahmanControllers.LahmanCsvController.RunLahmanFunctionAsync">
            <summary> Call async function to read a lahman csv file </summary>
            <remarks> You would only be calling one of the included six functions at a time; all six included below for ease / consolidation </remarks>
        </member>
        <member name="M:BaseballScraper.LahmanControllers.LahmanCsvController.GetAllLahmanCsvFileRecordsAsync(System.String)">
            <summary> Read a lahman csv file async </summary>
            <param name="filePath"> One of the six Lahman csv file paths </param>
        </member>
        <member name="M:BaseballScraper.EndPoints.MlbDataApiEndPoints.PitchingLeadersEndPoint(System.Int32,System.String,System.String)">
            <summary>
                Creates end point for a selected regular season
            </summary>
            <param name="results">
                The number of pitchers to include in the results
            </param>
            <param name="year">
                The year of the season you want to query
            </param>
            <param name="sortColumn">
                The stat that you would like to sort by (e.g. ERA)
            </param>
            <returns>
                List of current season pitching leaders
            </returns>
        </member>
        <member name="M:BaseballScraper.EndPoints.MlbDataApiEndPoints.PitchingLeadersEndPoint(System.Int32,System.String,System.String,System.String)">
            <summary>
                Creates end point for a selected year and part of the season (e.g. Spring Training, Regular Season, etc. )
            </summary>
            <remarks>
                This is a more specific version of the previous end point
            </remarks>
            <param name="results">
                The number of pitchers to include in the results
            </param>
            <param name="gameType">
                The part of the season
                Game type options:
                * R - Regular Season
                * S - Spring Training
                * E - Exhibition
                * A - All Star Game
                * D - Division Series
                * F - First Round (Wild Card)
                * L - League Championship
                * W - World Series
            </param>
            <param name="year">
                The year of the season you want to query
            </param>
            <param name="sortColumn">
                The stat that you would like to sort by (e.g. ERA)
            </param>
            <returns>
                List of pitching leaders for defined season and game type
            </returns>
        </member>
        <member name="M:BaseballScraper.EndPoints.MlbDataApiEndPoints.HittingLeadersEndPoint(System.Int32,System.String,System.String)">
            <summary>
                Creates end point for a selected regular season
            </summary>
            <param name="results">
                The number of hitters to include in the results
            </param>
            <param name="year">
                The year of the season you want to query
            </param>
            <param name="sortColumn">
                The stat that you would like to sort by (e.g. ops)
            </param>
            <returns>
                List of current season hitting leaders
            </returns>
        </member>
        <member name="M:BaseballScraper.EndPoints.MlbDataApiEndPoints.HittingLeadersEndPoint(System.Int32,System.String,System.String,System.String)">
            <summary>
                Creates end point for a selected year and part of the season (e.g. Spring Training, Regular Season, etc. )
            </summary>
            <remarks>
                This is a more specific version of the previous end point
            </remarks>
            <param name="results">
                The number of hitters to include in the results
            </param>
            <param name="gameType">
                The part of the season
                Game type options:
                * R - Regular Season
                * S - Spring Training
                * E - Exhibition
                * A - All Star Game
                * D - Division Series
                * F - First Round (Wild Card)
                * L - League Championship
                * W - World Series
            </param>
            <param name="year">
                The year of the season you want to query
            </param>
            <param name="sortColumn">
                The stat that you would like to sort by (e.g. Rbi)
            </param>
            <returns>
                List of hitting leaders for defined season and game type
            </returns>
        </member>
        <member name="M:BaseballScraper.Infrastructure.AirtableManager.GetBaseballScraperConfiguration">
            <summary>
                * Get configuration for Baseball Scraper project that is stored in airtable
                * This allows access to the table data
                * The table data is centralized config data for this app (i.e., it is not baseball data)
            </summary>
            <remarks>
                To get this working in other tables
                  1) private readonly AirtableManager _airtableManager;
                  2) DI into the class
                  3) Call by something like: var thisConfig = _airtableManager.GetBaseballScraperConfiguration();
            </remarks>
        </member>
        <member name="M:BaseballScraper.Infrastructure.AirtableManager.GetAllRecordsFromAirtableAsync(System.String,System.String)">
            <summary>
                Get all the records from a given table
            </summary>
            <remarks>
                Configuration for each table is setup in Startup.cs and airtableConfiguration.json
                See: https://github.com/ngocnicholas/airtable.net
            </remarks>
            <param name="tableName">
                Equivalent to the TableName in airtableConfiguration.json
                Equivalent to the tab name in actual airtable
            </param>
            <param name="tableAuthenticationString">
                Equivalent to the AuthenticationString in airtableConfiguration.json
            </param>
            <example>
                var listOfRecords = await _atM.GetAllRecordsFromAirtableAsync(_spRankingsConfiguration.TableName, _spRankingsConfiguration.AuthenticationString);
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.AirtableManager.GetOneRecordFromAirtable(System.Collections.Generic.List{AirtableApiClient.AirtableRecord},System.String,System.String)">
            <summary>
                Get filtered list of records based on value for a column / field
            </summary>
            <param name="listOfAirtableRecords">
                All records from a table
            </param>
            <param name="fieldToFilterKey">
                The name of the field / column you want to filter
            </param>
            <param name="valueToFilterFor">
                The value in the field / column that you want to filter for
            </param>
            <example>
                string fieldKey = "Record_Id"
                string recordId = 1
                var airtableRecordEnumerable = _atM.GetOneRecordFromAirtable(listOfRecords, "Record_Id", "1");
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.AirtableManager.GetRecordsFromTableWithSort(System.Collections.Generic.List{AirtableApiClient.AirtableRecord},System.String,System.String,System.String)">
            <summary>
                Get filtered list of records based on value for a column / field then sort
            </summary>
            <param name="listOfAirtableRecords">
                All records from a table
            </param>
            <param name="fieldToFilterKey">
                The name of the field / column you want to filter
            </param>
            <param name="valueToFilterFor">
                The value in the field / column that you want to filter for
            </param>
            <param name="fieldToSortKey">
                For the results of the filter, what column / field do you want to sort by?
            </param>
            <example>
                var airtableRecordEnumerable = _atM.GetRecordsFromTableWithSort(listOfRecords, "Month", "7", "Title");
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.AirtableManager.GetOneRecordFromAirtableAsync(System.String,System.String,System.String)">
            <summary>
                Get one record from a given table
            </summary>
            <remarks>
                Configuration for each table is setup in Startup.cs and airtableConfiguration.json
                See: https://github.com/ngocnicholas/airtable.net
            </remarks>
            <param name="tableName">
                Equivalent to the TableName in airtableConfiguration.json
                Equivalent to the tab name in actual airtable
            </param>
            <param name="tableAuthenticationString">
                Equivalent to the AuthenticationString in airtableConfiguration.json
            </param>
            <param name="recordId">
                The airtable generated record Id
                This is visible thorugh the API but NOT in the actual table
                It is different than things like "Author_Id", "Record_Id", "Website_Id"
            </param>
            <example>
                var oneRecord = await _atM.GetOneRecordFromAirtableAsync("SpRankings", authenticationString, "rec7yJqKs5Ht3I7j3");
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.AirtableManager.GetAuthorIdFromAuthorName(System.String)">
            <summary>
                Retrieves the Airtable generated Id for an author based on their name
                Note: the Airtable generated Id is different than "Author_Id"
            </summary>
            <remarks>
                This can be used when the Author table is used as a field in another table
                When author is referenced on another table, the Api provides the generated id instead of the author name
                If you look at the table, it'll show the author's name but that is not what the api actually provides
            </remarks>
            <example>
                var authorNameFromId = await _atM.GetAuthorIdFromAuthorName("Eno Sarris");
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.AirtableManager.GetWebsiteIdFromWebsiteName(System.String)">
            <summary>
                Retrieves the Airtable generated Id for website based on its name
                Note: the Airtable generated Id is different than "Website_Id"
            </summary>
            <remarks>
                This can be used when the website table is used as a field in another table
                When the website is referenced on another table, the Api provides the generated id instead of the website name
                If you look at the table, it'll show the websites's name but that is not what the api actually provides
            </remarks>
            <example>
                var websiteId = await _atM.GetWebsiteIdFromWebsiteName("FanGraphs");
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.AirtableManager.GetAllValuesForOneField(System.Collections.Generic.List{AirtableApiClient.AirtableRecord},System.String)">
            <summary>
                Get all the values for one field / column in a table
            </summary>
            <remarks>
                Some field values are strings and others are JArrays
                If the field refers to another table, it'll be a JArray
            </remarks>
            <param name="listOfAirtableRecords"></param>
            <param name="fieldName">
                The name of the field you want to get values for
            </param>
            <example>
                var listOfRecords = await _atM.GetAllRecordsFromAirtableAsync(_spRankingsConfiguration.TableName, _spRankingsConfiguration.AuthenticationString);
                var titles = _atM.GetOneFieldForListOfRecords(listOfRecords, "Title");
                var authors = _atM.GetOneFieldForListOfRecords(listOfRecords, "Author");
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ApiInfrastructure.ReturnJsonFromObject(System.Object)">
            <summary> Serialize a given object to a JSON stream (i.e., take a given object and convert it to JSON ) </summary>
            <param name="obj"> An object; typically a JObject (not certain how it deals with objects besides JObjects) </param>
            <returns></returns>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ApiInfrastructure.CreateModelJToken(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary> Returns a JToken that lists keys/values for player items in PlayerSearch api </summary>
            <returns> A JToken</returns>
        </member>
        <member name="M:BaseballScraper.Infrastructure.CsvHandler.MoveMultipleFiles(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:BaseballScraper.Infrastructure.CsvHandler.DownloadCsvFromLink(System.String,System.String)">
            <summary>
                Download remote CSV and save it to local location
            </summary>
            <param name="csvUrl">
                The full url of where the csv is linked / hosted
                Download CSV from this url
            </param>
            <param name="fullPathWithFileName">
                The name of the file that you want to write to
                Save CSV to location defined by 'targetFileName'
            </param>
            <example>
                DownloadCsvFromLink("http://crunchtimebaseball.com/master.csv", "BaseballData/PlayerBase/CrunchtimePlayerBaseCsvAutoDownload.csv")
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.CsvHandler.ReadCsvRecords(System.String,System.Type,System.Type)">
            <summary>
                Reads a csv file, non async
            </summary>
            <param name="csvFilePath"> The location / path of the file that you want to read </param>
            <param name="modelType">  </param>
            <param name="modelMapType"> </param>
            <example> _cH.ReadCsv("BaseballData/Lahman/Teams.csv"); </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.CsvHandler.ReadCsvRecordsAsync(System.String,System.Type,System.Type)">
            <summary>
                Reads a csv file, async
            </summary>
            <remarks>
                This does not enumerate over the records
            </remarks>
            <param name="csvFilePath">
                The location / path of the file that you want to read
            </param>
            <param name="modelType">
                The Lahman class / model that is in the csv file
            </param>
            <param name="modelMapType">
                The map of the Lahman class / model that is in the csv file
            </param>
            <example>
                await _cH.ReadCsvRecordsAsync(filePath, typeof(LahmanPeople), typeof(LahmanPeopleMap));
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.CsvHandler.RegisterMapForClass(CsvHelper.CsvReader,System.Type)">
            <summary>
                Register the map for the class within a csv you are trying read
            </summary>
            <remarks>
                This is required any type you want to use a model map
            </remarks>
            <param name="csvReader">
                A reader reading a csv file
            </param>
            <param name="modelType">
                The class / model that is in the csv file
            </param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.CsvHandler.ConvertCellWithPercentageSymbolToDecimal(Newtonsoft.Json.Linq.JToken)">
            <summary>
                Some cells have % symbol in them; this removes it and just gives the number back
                e.g., 13.1% becomes 13.1
                Helper method for: 'CreateFanGraphsHitterInstance(JToken allValuesInRow)' method
            </summary>
            <remarks>
                See: https://stackoverflow.com/questions/2171615/how-to-convert-percentage-string-to-double
            </remarks>
            <example>
                int numberOfPagesToScrape = await GetNumberOfPagesToScape(page);
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.DataTabler.CreateEmptyDataTable(System.String)">
            <summary>
                Create a new data table
            </summary>
            <returns>
                A new data table based with no columns or rows
            </returns>
            <example>
                var dataTable = CreateEmptyDataTable("TABLE TITLE");
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.DataTabler.CreateDataTableWithCustomHeaders(System.String,System.String[])">
            <summary>
                Create a new data table; add columns / headers to table of provided strings
            </summary>
            <returns>
                A new data table with headers of your choosing
            </returns>
            <example>
                string[] tableHeaders = { "Name", "Pitches", "CswPitches", "CSW%" };
                var dataTable = _dataTabler.CreateDataTableWithCustomHeaders("CSW PITCHERS", tableHeaders);
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.DataTabler.SetDataTableColumnHeaders(System.Collections.Generic.List{System.String},System.Data.DataTable)">
            <summary>
                Given a data table, set the tables headers with the values given in a list
            </summary>
            <param name="list">
                A list of strings that you want to be the headers
            </param>
            <param name="dataTable">
                The target data table that you want to set the headers for
            </param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.DataTabler.SetDataTableColumnHeaders(System.String[],System.Data.DataTable)">
            <summary>
                Set the column headers of a given table
            </summary>
            <param name="dataTable">
                The target data table that you want to insert columns and headers into
            </param>
            <param name="tableHeaders">
                Something like:
                    * string[] tableHeaders = { "Name", "Pitches", "CswPitches", "CSW%" };
            </param>
            <example>
                var dataTable = CreateEmptyDataTable("TABLE TITLE");
                string[] tableHeaders = { "Name", "Pitches", "CswPitches", "CSW%" };
                SetDataTableColumnHeaders(tableHeaders, dataTable);
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.DataTabler.InsertDataRowIntoTable(System.Data.DataTable,System.String,System.String)">
            <summary>
                Insert a row of data within a data table; desired cell value is passed in as a parameter
            </summary>
            <param name="dataTable">
                The target data table that you want to insert a row into
            </param>
            <param name="columnHeader">
                The header (string) of the column you want to insert data into
            </param>
            <param name="cellValue">
                The value that you want to insert into the cell of the column
            </param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.DataTabler.InsertDataRowIntoTable(System.Data.DataTable,System.Object[])">
            <summary>
                Insert a row of data within a data table; desired row/cell values are set through an object passed into method
            </summary>
            <param name="dataTable">
                The target data table that you want to insert a row into
            </param>
            <param name="rowData">
                Something like:
                    * Object[] pitcherData = { pitcher.PlayerName, pitcher.TotalPitches, pitcher.CswPitches, pitcher.CswPitchPercent };
            </param>
            <example>
                var dataTable = CreateEmptyDataTable("TABLE TITLE");
                string[] tableHeaders = { "Name", "Pitches", "CswPitches", "CSW%" };
                Object[] pitcherData = { pitcher.PlayerName, pitcher.TotalPitches, pitcher.CswPitches, pitcher.CswPitchPercent };
                InsertDataRowIntoTable(dataTable, pitcherData);
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.DataTabler.PrintTable(System.Data.DataTable)">
            <summary>
                Print a data table in console
            </summary>
            <param name="dataTable">
                The data table that you want to print in console
            </param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.EmailHelper.SendEmail(System.String,System.String)">
            <summary>
                Send an email
            </summary>
            <remarks>
                _gmail1Value and _gmail1PasswordForAppValue:
                    * Are set in user secrets
                    * Are configured in Startup.cs
                _gmail1Value:
                    * Is not primary email address
                _gmail1PasswordForAppValue is :
                    * configured via: https://myaccount.google.com/u/1/apppasswords
                    * Is a PW from gmail account that only works for this app
                    * Consider it an alternative to normal password
                See:
                    * https://garrymarsland.com/sending-email-from-a-net-core-2-1/
                    * https://support.google.com/accounts/answer/185833
                    * Google Account > Security > Signing in to Google > App passwords
            </remarks>
            <example>
                _emailHelper.SendEmail("TEST2", "TESTING SOMETHING NEW");
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.RegisterProviderToStart">
            <summary> Needs to be run before most Excel methods </summary>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.SetThreadCurrentCulture">
            <summary> Needs to be run before most Excel methods </summary>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.CreateNewExcelWorkbook(System.String)">
            <summary>
                This creates and saves a new Excel (XLS) file
            </summary>
            <remarks>
                File Type: XLSX
            </remarks>
            <param name="fileName">
                What you want the file to be named
            </param>
            <example>
                _excelHandler.CreateNewExcelWorkbook("BaseballScraper");
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.CreateNewExcelWorkbook">
            <summary> OPTION 1 --> Create and save a new Excel (xlsx) file </summary>
            <remarks>
                * File Type: XLSX
                * The name of the new Excel document and its first tab are defined within the method
            </remarks>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.CreateNewExcelWorkbook(System.String,System.String)">
            <summary> OPTION 2 --> Create and save a new Excel (xlsx) file </summary>
            <remarks> File Type: XLSX </remarks>
            <param name="fileName"> The name of the new Excel document that you want to create </param>
            <param name="sheetName"> The name of the first tab / sheet of the new Excel document </param>
            <example> _eM.CreateNewExcelWorkbook("BaseballScraper", "FgPitchers"); </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.ManageWorkbookNames(System.String)">
            <summary> This will format file names entered as string correctly to ensure the file name can be used by other methods; It will check if a the string entered as an argument to a method includes the '.xlsx' appended to the end of it; If it doesn't, it will add it; If it does, it will do nothing </summary>
            <param name="fileName"> The string, representing a file name, that needs to be checked </param>
            <returns> Properly formatted file name (as a string) that includes '.xlsx' appended to the file name </returns>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.AddSheetToExistingExcelWorkbook(System.String,System.String)">
            <summary> Adds a new tab / sheet to an existing Excel file </summary>
            <remarks> File Type: XLSX </remarks>
            <param name="fileName"> The name of the file that you want to add a new tab / sheet too </param>
            <param name="sheetName"> The new tab / sheet's name </param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.AddRecordToSheet(System.String,System.String)">
            <summary> Add a new row / record to a sheet in an existing xlsx </summary>
            <param name="fileName"> The name of the file you are targeting </param>
            <param name="sheetName"> The name of the tab / sheet you are targeting </param>
            <example> _eM.AddRecordToSheet("BaseballScraper", "FgHitters"); </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.GetAllRecordsInSheet(System.String,System.String)">
            <summary> Retrieve all records of a given class / model from an existing tab / sheet within an existing workbook </summary>
            <remarks> Class / model type is defined within the method </remarks>
            <param name="fileName"> The name of the file you are targeting </param>
            <param name="sheetName"> The name of the tab / sheet you are targeting </param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.AddRecordsToList``1(System.Collections.Generic.IList{``0},``0)">
            <summary> Add retrieved records / rows to a list </summary>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.PrintRecord``1(Npoi.Mapper.RowInfo{``0})">
            <summary> Prints records to a list </summary>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.SetColumnWidth(Export.XLS.ExcelDocument,System.String,System.Int32)">
            <summary> OPTION 1 --> Set the width of a given column </summary>
            <remarks> In option 1, you provide a letter; this is more intuitive than providing a number since Excel column headers are letters. A switch is used to convert the letter you provide to the right number so that the mapper understands it </remarks>
            <param name="document"> Excel document that the column is in </param>
            <param name="columnLetter"> The header letter (e.g, "A" or "AA" or "Z")</param>
            <param name="columnWidth"> The width that you want the column to be </param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.SetColumnWidth(Export.XLS.ExcelDocument,System.Int32,System.Int32)">
            <summary> OPTION 2 --> Set the width of a given column </summary>
            <remarks> In option 2, you provide a number that corresponds to column number </remarks>
            <param name="document"> Excel document that the column is in </param>
            <param name="columnNumber"> The target column number </param>
            <param name="columnWidth"> The width that you want the column to be </param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.SetCellValue(Export.XLS.ExcelDocument,System.Int32,System.String,System.Object)">
            <summary> OPTION 1 --> Set the contents of a cell </summary>
            <remarks> In option 1, you provide a letter; this is more intuitive than providing a number since Excel column headers are letters. A switch is used to convert the letter you provide to the right number so that the mapper understands it </remarks>
            <param name="document"> Excel document that the cell is in </param>
            <param name="rowNumber"> The row of the cell </param>
            <param name="columnLetter"> The column letter of the cell </param>
            <param name="cellValue"> What you want to add to the cell </param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.SetCellValue(Export.XLS.ExcelDocument,System.Int32,System.Int32,System.Object)">
            <summary> OPTION 2 --> Set the contents of a cell </summary>
            <remarks> In option 2, you provide a number to represent the target column </remarks>
            <param name="document"> Excel document that the cell is in </param>
            <param name="rowNumber"> The row of the cell </param>
            <param name="columnNumber"> The column number of the cell </param>
            <param name="cellValue"> What you want to add to the cell </param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.SetFont(Export.XLS.ExcelDocument,System.Int32,System.String,System.String,System.Int32)">
            <summary> OPTION 1 --> Set font of a target cell </summary>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.SetFont(Export.XLS.ExcelDocument,System.Int32,System.Int32,System.String,System.Int32)">
            <summary> OPTION 2 --> Set font of a target cell </summary>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.FormatDate(Export.XLS.ExcelDocument,System.Int32,System.Int32)">
            <summary> Format a date cell </summary>
        </member>
        <member name="M:BaseballScraper.Infrastructure.ExcelHandler.ColumnHeaderLetterToNumber(System.String)">
            <summary> Converts a given letter to it's corresponding number </summary>
            <remark> This makes it so you can enter a letter instead of a number when identifying an Excel column; basically it makes it more intuitive / natural - you don't have to figure out what column number each letter is </remark>
            <param name="letter"> A letter that corresponds to an Excel column </param>
            <returns> The column number of an Excel column </returns>
        </member>
        <member name="M:BaseballScraper.Infrastructure.GoogleSheetsConnector.GetSfbbPlayerIdMapConfiguration">
            <summary>
                Gets all configuration information from SffbPlayerIdMap from gSheetNames.json configuration file
            </summary>
            <remarks>
                See: gSheetNames.json, GoogleSheetsConnector.cs, GoogleSheetConfiguration.cs
                Inserted into Dependency Injection in Startup.cs
            </remarks>
            <example>
            <code>
            public class GenericController
            private readonly GoogleSheetConfiguration _sfbbPlayerIdMapConfiguration;
            public GenericController(IOptionsSnapshot GoogleSheetConfiguration options)
            {
                _sfbbPlayerIdMapConfiguration = options.Get("SfbbPlayerIdMap");
            }
            var sfbbDocumentName = _sfbbPlayerIdMapConfiguration.DocumentName;
            </code>
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.GoogleSheetsConnector.GetCrunchTimePlayerIdMapConfiguration">
            <summary>
                Gets all configuration information from CrunchtimePlayerIdMap from gSheetNames.json configuration file
            </summary>
            <remarks>
                See: gSheetNames.json, GoogleSheetsConnector.cs, GoogleSheetConfiguration.cs
                Inserted into Dependency Injection in Startup.cs
            </remarks>
            <example>
            <code>
                public class GenericController
                private readonly GoogleSheetConfiguration _crunchTimePlayerIdMapConfiguration;
                public GenericController(IOptionsSnapshot GoogleSheetConfiguration options)
                {
                    _crunchTimePlayerIdMapConfiguration = options.Get("CrunchtimePlayerIdMap");
                }
                var crunchtimeDocumentName = _crunchTimePlayerIdMapConfiguration.DocumentName;
            </code>
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.GoogleSheetsConnector.WriteGoogleSheetRows(System.Collections.Generic.IList{System.Collections.Generic.IList{System.Object}},System.String,System.String,System.String)">
            <example>
                private static readonly GoogleSheetsConnector _gSC = new GoogleSheetsConnector();
                _gSC.UpdateGoogleSheetRows(listOfLists,"FG_SP_MASTER_IMPORT","A3:DB1000","CoreCalculator");
            </example>
            <remarks>
                View "FgSpMasterReportController" > "ScrapePitchersAndCreateList" for an example of this in practice
            </remarks>
        </member>
        <member name="M:BaseballScraper.Infrastructure.GoogleSheetsConnector.WriteGoogleSheetColumns(System.Collections.Generic.IList{System.Collections.Generic.IList{System.Object}},System.String,System.String,System.String)">
            <example>
                _gSC.WriteGoogleSheetColumns(listOfLists, "YAHOO_TRENDS","A1:Z1000","CoreCalculator");
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.GoogleSheetsConnector.WriteGoogleSheetColumnsAsync(System.Collections.Generic.IList{System.Collections.Generic.IList{System.Object}},System.String,System.String,System.String)">
            <example>
                await _gSC.WriteGoogleSheetColumnsAsync(listOfLists, "YAHOO_TRENDS","A1:Z1000","CoreCalculator");
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.Helpers.PrintJsonFromObject(System.Object)">
            <summary>
                Serialize a given object to a JSON stream (i.e., take a given object and convert it to JSON ) and print to console
            </summary>
            <param name="obj">
                An object; typically a JObject
                Not certain how it deals with objects besides JObjects)
            </param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.Helpers.PrintKeyValuePairs(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
                Print the keys and values from a given IEnumerable
            </summary>
            <param name="keyValuePairs">
                An IEnumerable containing variable keys and values
            </param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.PostmanMethods.PostmanToken(System.String)">
            <summary>
                A switch that returns a postman token depending upon the end type you are use
            </summary>
            <remarks> Each of the return values were generated by Postman </remarks>
            <param name="apiType"> The api method / endpoinot you are querying </param>
            <returns> A string that represents an api Postman token</returns>
        </member>
        <member name="M:BaseballScraper.Infrastructure.PythonConnector.ConnectToPythonFile(System.String)">
            <summary>
                Create a connection between .NET and a Python file; This must be run before any of the other methods will work
            </summary>
            <remarks>
                This must be run before any of the other below methods
            </remarks>
            <returns>
                A connection between .NET and Python
            </returns>
        </member>
        <member name="M:BaseballScraper.Infrastructure.PythonConnector.GetPythonVariableValue(Microsoft.Scripting.Hosting.ScriptScope,System.String)">
            <summary>
                Retrieve a variable value from a Python scope / file
            </summary>
            <remarks>
                This must be run AFTER establishing connection to a Python file (i.e, run 'ConnectToPythonFile' method before running this method)
            </remarks>
            <param name="scope">
                ScriptScope generated to connect to Python file
            </param>
            <param name="variableKey">
                The key in the actual Python file that you want to retrieve the value for
            </param>
            <example>
                var parameter = GetPythonVariableValue(scope, "parameter"); Where 'parameter' is the variable name in the Python file
            </example>
            <returns>
                A value of a variable from a Python file
            </returns>
        </member>
        <member name="M:BaseballScraper.Infrastructure.PythonConnector.GetPythonVariableNames(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
                Retrieve all variable names from a Python scope / file
            </summary>
            <remarks>
                This must be run AFTER establishing connection to a Python file (i.e, run 'ConnectToPythonFile' method before running this method)
            </remarks>
            <param name="scope">
                ScriptScope generated to connect to Python file
            </param>
            <returns>
                A list of the names of each variable within a Python scope / file
            </returns>
        </member>
        <member name="M:BaseballScraper.Infrastructure.PythonConnector.GetPythonKeyValuePairs(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
                Retrieve variable keys(i.e., names) and values from a Python scope / file
            </summary>
            <remarks>
                This must be run AFTER establishing connection to a Python file (i.e, run 'ConnectToPythonFile' method before running this method)
            </remarks>
            <param name="scope">
                ScriptScope generated to connect to Python file
            </param>
            <example>
                GetPythonKeyValuePairs(scope);
            </example>
            <returns>
                An IEnumerable of keys and values from a Python scope / file
            </returns>
        </member>
        <member name="M:BaseballScraper.Infrastructure.PythonConnector.SetPythonVariableKeyAndValue(Microsoft.Scripting.Hosting.ScriptScope,System.String,System.String)">
            <summary>
                Set variable key (i.e. name) and value in corresponding Python scope / file
            </summary>
            <remarks>
                This must be run AFTER establishing connection to a Python file (i.e, run 'ConnectToPythonFile' method before running this method)
            </remarks>
            <param name="scope">
                ScriptScope generated to connect to Python file
            </param>
            <param name="variableKey">
                The key in the actual Python file that you want to retrieve the value for
            </param>
            <param name="variableValue">
                The value in the actual Python file that you want to retrieve
            </param>
            <example>
                SetPythonVariableKeyAndValue(scope, "myObjectKey", "my object value");
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.PythonConnector.SetPythonKeyValueDictionary(Microsoft.Scripting.Hosting.ScriptScope,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
                Given a dictionary of keys and values, set Keys and Values as Python variable Keys and Values
            </summary>
            <remarks>
                This must be run AFTER establishing connection to a Python file (i.e, run 'ConnectToPythonFile' method before running this method)
                To print the dictionary in Python --> 'print('dictionaryName')
            </remarks>
            <param name="scope">
                ScriptScope generated to connect to Python file
            </param>
            <param name="keysAndValuesDictionary">
                A dictionary of keys and values where keys are strings and values are objects
            </param>
            <param name="dictionaryName">
                The name of the dictionary
            </param>
            <example>
            <code>
            </code>
            </example>
        </member>
        <member name="M:BaseballScraper.Infrastructure.PythonConnector.PrintPythonKeyValuePairs(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary> Print the keys and values from a given IEnumerable </summary>
            <example> PrintPythonKeyValuePairs(pythonKeyValuePairs); </example>
            <param name="pythonKeyValuePairs"> An IEnumerable containing variable keys and values</param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.PythonConnector.PrintPythonKeyValuePairs(System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary> Print the keys and values from a given Dictionary </summary>
             <example> PrintPythonKeyValuePairs(pythonKeyValuePairs); </example>
             <param name="pythonKeyValuePairs"> A Dictionary containing variable keys and values</param>
            
        </member>
        <member name="T:BaseballScraper.Infrastructure.RdotNetConnector">
             <summary> Includes various R functions / actions </summary>
             <list> RESOURCES
                 <item> https://billpetti.github.io/baseballr/data-acquisition-functions/ </item>
                 <item> https://pitchrx.cpsievert.me </item>
                 <item> Book: Analyzing Baseball Data With R </item>
                 <item> http://lahman.r-forge.r-project.org/doc/ </item>
             </list>
            
             <list> PROCESS TO START: three steps needed to get csharp and R to work together; enter these in terminal in succession before attempting to run any of the below
                 <item>
                     (1) export LD_LIBRARY_PATH=/Library/Frameworks/R.framework/Libraries/:$LD_LIBRARY_PATH
                 </item>
                 <item>
                     (2) export PATH=/Library/Frameworks/R.framework/Libraries/:$PATH
                 </item>
                 <item>
                     (3) export R_HOME=/Library/Frameworks/R.framework/Resources
                 </item>
             </list>
            
             <list> REQUIRED R PACKAGES
                 <item> install.packages("pitchRx") </item>
                 <item> install.packages("baseballr") </item>
                 <item> install.packages("Lahman") </item>
             </list>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.CreateNewREngine">
            <summary>
                Creates a new engine that drives other R functions
            </summary>
            <returns>
                A new R Engine
            </returns>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.ImportBaseballR">
            <summary> Imports the baseballr library </summary>
            <reference> https://billpetti.github.io/baseballr/data-acquisition-functions/ </reference>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.GetLahmanBattingStats">
            <summary> </summary>
            <reference> http://lahman.r-forge.r-project.org/doc/ </reference>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.GetLahmanTeamInfo(System.String)">
            <summary> Get Mlb player's Player Id, First Name, Last Name</summary>
            <reference> http://lahman.r-forge.r-project.org/doc/ </reference>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.GetPitchRxData(System.String,System.String)">
            <summary> Scrapes and returns a significant amount of data about each individual at bat within a given date range </summary>
            <example> _r.GetPitchRxData("2013-06-01", "2013-06-01"); </example>
            <param name="startDate"> First date of the range you are looking for (e.g, "2016-04-06") </param>
            <param name="endDate"> Last date of the range you are looking for (e.g, "2016-06-21") </param>
            <returns>
                <list>
                    <item> AT BAT: pitcher (id), batter (id), num (pitch number?), b, s, o, start_tfs, start_tfs_zulu, stand, b_height, p_throws, atbat_des, home_team_runs, away_team_runs, url (for XML), inning_side(top OR bottom), inning, next_, event2, batter_name, pitcher_name, gameday_link, date </item>
                    <item> ACTION: b, s, o, des, event, tfs_zulu, player (id), pitch (number), event_num, home_team_runs, away_team_runs, url (for XML), inning_side (top OR bottom), inning, next_, num, score, event2, gameday_link </item>
                    <item> PITCH: des, id, type (B, S, X), tfs, tfs_zulu, x, y, event_num, sv_id, play_guid, start_speed, end_speed, sz_top, sz_top, pfx_x, pfx_z, px, pz, x0, y0, z0, vx0, vy0, vz0, ax, ay, az, break_y </item>
                </list>
            </returns>
            <reference> https://pitchrx.cpsievert.me </reference>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.ScrapeBaseballSavantStatcast(System.String,System.String,System.Int32)">
            <summary>
                Get statcast data for individual games between a start and end date
            </summary>
            <remarks>
                See: https://billpetti.github.io/baseballr/data-acquisition-functions/
            </remarks>
            <example>
                _r.ScrapeBaseballSavantStatcast("2016-04-06", "2016-04-15", 592789);
            </example>
            <param name="startDate">
                First date of the range you are looking for (e.g, "2016-04-06")
            </param>
            <param name="endDate">
                Last date of the range you are looking for (e.g, "2016-06-21")
            </param>
            <param name="playerId">
                The player's MLBAMID you are looking for
                <see cref="M:BaseballScraper.Infrastructure.RdotNetConnector.SearchForPlayer(System.String)"/> to get a player's playerId
            </param>
            <returns>
                pitch_type, game_date, release_speed, release_pos_x, release_pos_z, player_name, and many more
            </returns>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.GetFanGraphsHitterLeaderboard(System.Int32,System.String)">
            <summary>
                OPTION 1A --> Retrieve FanGraphs hitter leader board for:  SINGLE SEASON | ALL MLB | QUALIFIED or UNQUALIFIED
            </summary>
            <remarks>
                See: https://billpetti.github.io/baseballr/data-acquisition-functions/
            </remarks>
            <example> _r.GetFanGraphsHitterLeaderboard(2017, "y");
            </example>
            <param name="year">
                The year of the season you want to get the leaders for
            </param>
            <param name="qual">
                Whether to include only batters that were qualified. Defaults to 'y'. Alternatively, you can pass a minimum number of plate appearances to restrict the data to.
            </param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.GetFanGraphsHitterLeaderboard(System.Int32,System.Int32)">
            <summary>
                OPTION 1B --> Retrieve FanGraphs hitter leader board for:  SINGLE SEASON | ALL MLB | players with PLATE APPEARANCES greater than defined #
            </summary>
            <remarks>
                See: https://billpetti.github.io/baseballr/data-acquisition-functions/
            </remarks>
            <example>
                _r.GetFanGraphsHitterLeaderboard(2018, 200);
            </example>
            <param name="year">
                The year of the season you want to get the leaders for
            </param>
            <param name="minPlateAppearances">
                Number of plate appearances a hitter needs to show up in the results.
            </param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.GetFanGraphsHitterLeaderboard(System.Int32,System.String,System.String)">
            <summary>
                OPTION 2 --> Retrieve FanGraphs hitter leader board for:  SINGLE SEASON | ALL or AL or NL | QUALIFIED or UNQUALIFIED
            </summary>
            <remarks>
                See: https://billpetti.github.io/baseballr/data-acquisition-functions/
            </remarks>
            <example>
                _r.GetFanGraphsHitterLeaderboard(2017, "nl", "y");
            </example>
            <param name="year">
                The year of the season you want to get the leaders for
            </param>
            <param name="league">
                You can get records for all of MLB ('all'), the National League ('nl'), or the American League ('al')
            </param>
            <param name="qual">
                Whether to include only batters that were qualified. Defaults to 'y'. Alternatively, you can pass a minimum number of plate appearances to restrict the data to.
            </param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.GetFanGraphsHitterLeaderboard(System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            OPTION 3A --> Retrieve FanGraphs hitter leader board for:  RANGE OF SEASON | ALL or AL or NL | QUALIFIED or UNQUALIFIED | display in AGGREGATE or by SEASON
            </summary>
            <example>
                _r.GetFanGraphsHitterLeaderboard(2014, 2017, "nl", "y", "season");
            </example>
            <remarks>
                See: https://billpetti.github.io/baseballr/data-acquisition-functions/
            </remarks>
            <param name="startYear">
                The first year / season you want to get the leaders for
            </param>
            <param name="endYear">
                The last year / season you want to get the leaders for
            </param>
            <param name="league">
                You can get records for all of MLB ('all'), the National League ('nl'), or the American League ('al')
            </param>
            <param name="qual">
                Whether to include only batters that were qualified. Defaults to 'y'. Alternatively, you can pass a minimum number of plate appearances to restrict the data to.
            </param>
            <param name="statDisplayType">
                Whether to split the data by batter and individual season, or to simply aggregate by batter across the seasons selected. Defaults to aggregating (ind = 0). To split by season, use ind = 1
            </param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.GetFanGraphsHitterLeaderboard(System.Int32,System.Int32,System.String,System.Int32,System.String)">
            <summary> OPTION 3B --> Retrieve FanGraphs hitter leader board for:  RANGE OF SEASON | ALL or AL or NL | players with PLATE APPEARANCES greater than defined # | display in AGGREGATE or by SEASON </summary>
            <example> _r.GetFanGraphsHitterLeaderboard(2014, 2017, "all", 200, "aggregate"); </example>
            <remarks>
                See: https://billpetti.github.io/baseballr/data-acquisition-functions/
            </remarks>
            <param name="startYear"> The first year / season you want to get the leaders for </param>
            <param name="endYear"> The last year / season you want to get the leaders for </param>
            <param name="league">  You can get records for all of MLB ('all'), the National League ('nl'), or the American League ('al') </param>
            <param name="minPlateAppearances"> Whether to include only batters that were qualified. Defaults to 'y'. Alternatively, you can pass a minimum number of plate appearances to restrict the data to. </param>
            <param name="statDisplayType"> Whether to split the data by batter and individual season, or to simply aggregate by batter across the seasons selected. Defaults to aggregating (ind = 0). To split by season, use ind = 1 </param>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.GetFanGraphsGuts">
            <summary> Retrieves components and constants FanGraphs uses for calculating metrics such as wOBA and FIP</summary>
            <remarks>
                See: https://billpetti.github.io/baseballr/data-acquisition-functions/
            </remarks>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.GetFanGraphsParkFactors(System.Int32)">
            <summary> Retrieves park factors for mlb stadiums for a given year </summary>
            <remarks>
                See: https://billpetti.github.io/baseballr/data-acquisition-functions/
            </remarks>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.GetFanGraphsParkFactorsByBatterHandedness(System.Int32)">
            <summary>
                Retrieves park factors for mlb stadiums for a given year and splits it between righties and lefties
            </summary>
            <remarks>
                Only available for years 2002 and later
            </remarks>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.SearchForPlayer(System.String)">
            <summary> Search the Chadwich Bureau Register for a mlb player based on their last name </summary>
            <remarks>
                See: https://billpetti.github.io/baseballr/data-acquisition-functions/
            </remarks>
            <example> _r.SearchForPlayer("Seager"); </example>
            <param name="lastName"> Mlb player's last name </param>
            <returns> first_name, last_name, given_name, name_suffix, nick_name, birth_year, mlb_played_first, mlbam_id, retrosheet_id, retrosheet_id, bbref_id, fangraphs_id </returns>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.GetMlbStandingsOnDate(System.String,System.String)">
            <summary> Get mlb standings on a specific date for a particular league (AL or NL) and division </summary>
            <remarks>
                Differs from 'GetMlbStandingsFromDateForward' in that the 'from' parameter is FALSE
                See: https://billpetti.github.io/baseballr/data-acquisition-functions/
            </remarks>
            <param name="mlbLeagueAndDivision"> A combination of league and division (e.g, "AL Central") </param>
                <example> If you want league/division do something like "AL Central" </example>
                <example> If you want overall league standings do "AL Overall" </example>
            <param name="standingsDate"> The date that you want to view standings for (e.g, "2015-08-01")</param>
            <example> _r.GetMlbStandingsOnDate("NL East", "2015-08-01"); </example>
            <returns> tm, W, L, W-L%, GB, RS, RA, pythW-L% </returns>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.GetMlbStandingsFromDateForward(System.String,System.String)">
            <summary> Get mlb standings from a specific date moving forward for a particular league (AL or NL) and division </summary>
            <remarks> Differs from 'GetMlbStandingsOnDate' in that the 'from' parameter is TRUE </remarks>
            <param name="mlbLeagueAndDivision"> A combination of league and division (e.g, "AL Central") </param>
                <example> If you want league/division do something like "AL Central" </example>
                <example> If you want overall league standings do "AL Overall" </example>
            <param name="standingsDate"> The date that you want to view standings forward from (e.g, "2015-08-01")</param>
            <example> _r.GetMlbStandingsFromDateForward("NL East", "2015-08-01"); </example>
            <returns> tm, W, L, W-L%, GB, RS, RA, pythW-L% </returns>
            <remarks> https://billpetti.github.io/baseballr/data-acquisition-functions/ </remarks>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.GetPlayerEdgePercentage(System.String,System.String,System.String)">
            <summary> The edge_scrape() function allows the user to scrape PITCHf/x data from the GameDay application using Carson Sievert’s pitchRx package and to calculate metrics associated with Edge%. </summary>
            <example> _r.GetPlayerEdgePercentage("2015-04-06", "2015-04-07", "pitcher"); </example>
            <param name="startDate"> First date of the range you are looking for (e.g, "2016-04-06") </param>
            <param name="endDate"> Last date of the range you are looking for (e.g, "2016-06-21") </param>
            <param name="pitcherOrBatter"> Position type. Two options: 'pitcher' OR 'batter' </param>
            <remarks> https://billpetti.github.io/baseballr/data-acquisition-functions/ </remarks>
        </member>
        <member name="M:BaseballScraper.Infrastructure.RdotNetConnector.CalculatePitcherWinningPercentage">
            <summary> Get a single pitcher's winning percentage </summary>
            <remarks> Calculating Baseball Data with R </remarks>
        </member>
        <member name="T:Models.Model_EP">
            <summary>
            Generated algorithm for performing inference.
            </summary>
            <remarks>
            If you wish to use this class directly, you must perform the following steps:
            1) Create an instance of the class.
            2) Set the value of any externally-set fields e.g. data, priors.
            3) Call the Execute(numberOfIterations) method.
            4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
            
            Generated by Infer.NET 0.3.1810.501 at 3:23 PM on Wednesday, August 14, 2019.
            </remarks>
        </member>
        <member name="F:Models.Model_EP.Changed_numberOfIterations_vint__0_vint__1_isDone">
            <summary>True if Changed_numberOfIterations_vint__0_vint__1 has executed. Set this to false to force re-execution of Changed_numberOfIterations_vint__0_vint__1</summary>
        </member>
        <member name="F:Models.Model_EP.Changed_numberOfIterationsDecreased_Init_vint__0_vint__1_isDone">
            <summary>True if Changed_numberOfIterationsDecreased_Init_vint__0_vint__1 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vint__0_vint__1</summary>
        </member>
        <member name="F:Models.Model_EP.Changed_numberOfIterationsDecreased_Init_vint__0_vint__1_isInitialised">
            <summary>True if Changed_numberOfIterationsDecreased_Init_vint__0_vint__1 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vint__0_vint__1</summary>
        </member>
        <member name="F:Models.Model_EP.Changed_vint__0_isDone">
            <summary>True if Changed_vint__0 has executed. Set this to false to force re-execution of Changed_vint__0</summary>
        </member>
        <member name="F:Models.Model_EP.Changed_vint__1_isDone">
            <summary>True if Changed_vint__1 has executed. Set this to false to force re-execution of Changed_vint__1</summary>
        </member>
        <member name="F:Models.Model_EP.Constant_isDone">
            <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
        </member>
        <member name="F:Models.Model_EP.numberOfIterationsDone">
            <summary>Field backing the NumberOfIterationsDone property</summary>
        </member>
        <member name="F:Models.Model_EP.vdouble__0_marginal_F">
            <summary>Message to marginal of 'vdouble__0'</summary>
        </member>
        <member name="F:Models.Model_EP.vdouble__0_uses_B">
            <summary>Messages from use of 'vdouble__0'</summary>
        </member>
        <member name="F:Models.Model_EP.Vint__0">
            <summary>Field backing the vint__0 property</summary>
        </member>
        <member name="F:Models.Model_EP.Vint__1">
            <summary>Field backing the vint__1 property</summary>
        </member>
        <member name="P:Models.Model_EP.NumberOfIterationsDone">
            <summary>The number of iterations done from the initial state</summary>
        </member>
        <member name="P:Models.Model_EP.vint__0">
            <summary>The externally-specified value of 'vint__0'</summary>
        </member>
        <member name="P:Models.Model_EP.vint__1">
            <summary>The externally-specified value of 'vint__1'</summary>
        </member>
        <member name="M:Models.Model_EP.Changed_numberOfIterations_vint__0_vint__1(System.Int32)">
            <summary>Computations that depend on the observed value of numberOfIterations and vint__0 and vint__1</summary>
            <param name="numberOfIterations">The number of times to iterate each loop</param>
        </member>
        <member name="M:Models.Model_EP.Changed_numberOfIterationsDecreased_Init_vint__0_vint__1(System.Boolean)">
            <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to vint__0 and vint__1</summary>
            <param name="initialise">If true, reset messages that initialise loops</param>
        </member>
        <member name="M:Models.Model_EP.Changed_vint__0">
            <summary>Computations that depend on the observed value of vint__0</summary>
        </member>
        <member name="M:Models.Model_EP.Changed_vint__1">
            <summary>Computations that depend on the observed value of vint__1</summary>
        </member>
        <member name="M:Models.Model_EP.Constant">
            <summary>Computations that do not depend on observed values</summary>
        </member>
        <member name="M:Models.Model_EP.Execute(System.Int32,System.Boolean)">
            <summary>Update all marginals, by iterating message passing the given number of times</summary>
            <param name="numberOfIterations">The number of times to iterate each loop</param>
            <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
        </member>
        <member name="M:Models.Model_EP.Execute(System.Int32)">
            <summary>Update all marginals, by iterating message-passing the given number of times</summary>
            <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
        </member>
        <member name="M:Models.Model_EP.GetObservedValue(System.String)">
            <summary>Get the observed value of the specified variable.</summary>
            <param name="variableName">Variable name</param>
        </member>
        <member name="M:Models.Model_EP.Marginal(System.String)">
            <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
            <param name="variableName">Name of the variable in the generated code</param>
            <returns>The marginal distribution computed up to this point</returns>
            <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
        </member>
        <member name="M:Models.Model_EP.Marginal``1(System.String)">
            <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
            <typeparam name="T">The distribution type.</typeparam>
            <param name="variableName">Name of the variable in the generated code</param>
            <returns>The marginal distribution computed up to this point</returns>
            <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
        </member>
        <member name="M:Models.Model_EP.Marginal(System.String,System.String)">
            <summary>Get the query-specific marginal distribution of a variable.</summary>
            <param name="variableName">Name of the variable in the generated code</param>
            <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
            <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
        </member>
        <member name="M:Models.Model_EP.Marginal``1(System.String,System.String)">
            <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
            <typeparam name="T">The distribution type.</typeparam>
            <param name="variableName">Name of the variable in the generated code</param>
            <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
            <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
        </member>
        <member name="M:Models.Model_EP.Reset">
            <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
        </member>
        <member name="M:Models.Model_EP.SetObservedValue(System.String,System.Object)">
            <summary>Set the observed value of the specified variable.</summary>
            <param name="variableName">Variable name</param>
            <param name="value">Observed value</param>
        </member>
        <member name="M:Models.Model_EP.Update(System.Int32)">
            <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
            <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
        </member>
        <member name="M:Models.Model_EP.Vdouble__0Marginal">
            <summary>
            Returns the marginal distribution for 'vdouble__0' given by the current state of the
            message passing algorithm.
            </summary>
            <returns>The marginal distribution</returns>
        </member>
        <member name="M:Models.Model_EP.Vint__0Marginal">
            <summary>
            Returns the marginal distribution for 'vint__0' given by the current state of the
            message passing algorithm.
            </summary>
            <returns>The marginal distribution</returns>
        </member>
        <member name="M:Models.Model_EP.Vint__1Marginal">
            <summary>
            Returns the marginal distribution for 'vint__1' given by the current state of the
            message passing algorithm.
            </summary>
            <returns>The marginal distribution</returns>
        </member>
        <member name="E:Models.Model_EP.ProgressChanged">
            <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
        </member>
    </members>
</doc>

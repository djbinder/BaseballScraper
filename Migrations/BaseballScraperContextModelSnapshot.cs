// <auto-generated />
using System;
using BaseballScraper.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BaseballScraper.Migrations
{
    [DbContext(typeof(BaseballScraperContext))]
    partial class BaseballScraperContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BaseballScraper.Models.BaseballSavant.StartingPitcherCsw", b =>
                {
                    b.Property<int>("StartingPitcherCswId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abs");

                    b.Property<string>("Ba");

                    b.Property<string>("Babip");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CswPitches");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("EffectiveMinVelocity");

                    b.Property<string>("EffectiveSpeed");

                    b.Property<string>("Hits");

                    b.Property<string>("Iso");

                    b.Property<string>("LaunchAngle");

                    b.Property<string>("LaunchSpeed");

                    b.Property<string>("PitchPercent");

                    b.Property<string>("PlayerId");

                    b.Property<string>("PlayerName");

                    b.Property<string>("Pos3IntStartDistance");

                    b.Property<string>("Pos4IntStartDistance");

                    b.Property<string>("Pos5IntStartDistance");

                    b.Property<string>("Pos6IntStartDistance");

                    b.Property<string>("Pos7IntStartDistance");

                    b.Property<string>("Pos8IntStartDistance");

                    b.Property<string>("Pos9IntStartDistance");

                    b.Property<string>("ReleaseExtension");

                    b.Property<string>("Slg");

                    b.Property<string>("SpinRate");

                    b.Property<string>("Swings");

                    b.Property<string>("Takes");

                    b.Property<string>("TotalPitches");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("Velocity");

                    b.Property<string>("Whiffs");

                    b.Property<string>("Woba");

                    b.Property<string>("Xba");

                    b.Property<string>("Xwoba");

                    b.HasKey("StartingPitcherCswId");

                    b.ToTable("StartingPitcherCsws");

                    b.HasDiscriminator<string>("Discriminator").HasValue("StartingPitcherCsw");
                });

            modelBuilder.Entity("BaseballScraper.Models.Player.PlayerNote", b =>
                {
                    b.Property<int>("PlayerNoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CalendarYear");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Note");

                    b.Property<string>("NoteTone");

                    b.Property<string>("NoteWriter");

                    b.Property<string>("PlayerName");

                    b.Property<string>("Position");

                    b.Property<string>("PositionType");

                    b.Property<int?>("Season");

                    b.Property<string>("SourceSite");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("PlayerNoteId");

                    b.ToTable("PlayerNotes");
                });

            modelBuilder.Entity("BaseballScraper.Models.Yahoo.YahooManager", b =>
                {
                    b.Property<int>("YahooManagerRecordId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Guid");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("IsCommissioner");

                    b.Property<string>("IsCurrentLogin");

                    b.Property<string>("ManagerId");

                    b.Property<string>("NickName");

                    b.Property<int?>("YahooTeamBaseRecordId");

                    b.HasKey("YahooManagerRecordId");

                    b.HasIndex("YahooTeamBaseRecordId");

                    b.ToTable("YahooManager");
                });

            modelBuilder.Entity("BaseballScraper.Models.Yahoo.YahooTeamBase", b =>
                {
                    b.Property<int>("YahooTeamBaseRecordId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HasDraftGrade");

                    b.Property<int?>("IsOwnedByCurrentLogin");

                    b.Property<string>("LeagueScoringType");

                    b.Property<int?>("NumberOfMoves");

                    b.Property<int?>("NumberOfTrades");

                    b.Property<int?>("PrimaryTeamManagerYahooManagerRecordId");

                    b.Property<int?>("TeamId");

                    b.Property<string>("TeamKey");

                    b.Property<int?>("TeamLogoYahooTeamLogoRecordId");

                    b.Property<string>("TeamName");

                    b.Property<int?>("TeamRosterAddsYahooTeamRosterAddsRecordId");

                    b.Property<string>("Url");

                    b.Property<int?>("WaiverPriority");

                    b.HasKey("YahooTeamBaseRecordId");

                    b.HasIndex("PrimaryTeamManagerYahooManagerRecordId");

                    b.HasIndex("TeamLogoYahooTeamLogoRecordId");

                    b.HasIndex("TeamRosterAddsYahooTeamRosterAddsRecordId");

                    b.ToTable("YahooTeamBase");
                });

            modelBuilder.Entity("BaseballScraper.Models.Yahoo.YahooTeamLogo", b =>
                {
                    b.Property<int>("YahooTeamLogoRecordId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Size");

                    b.Property<int>("TeamLogoId");

                    b.Property<string>("Url");

                    b.HasKey("YahooTeamLogoRecordId");

                    b.ToTable("YahooTeamLogo");
                });

            modelBuilder.Entity("BaseballScraper.Models.Yahoo.YahooTeamRosterAdds", b =>
                {
                    b.Property<int>("YahooTeamRosterAddsRecordId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CoverageType");

                    b.Property<string>("CoverageValue");

                    b.Property<string>("Value");

                    b.HasKey("YahooTeamRosterAddsRecordId");

                    b.ToTable("YahooTeamRosterAdds");
                });

            modelBuilder.Entity("BaseballScraper.Models.BaseballSavant.StartingPitcherCswDateRange", b =>
                {
                    b.HasBaseType("BaseballScraper.Models.BaseballSavant.StartingPitcherCsw");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.ToTable("StartingPitcherCswDateRange");

                    b.HasDiscriminator().HasValue("StartingPitcherCswDateRange");
                });

            modelBuilder.Entity("BaseballScraper.Models.BaseballSavant.StartingPitcherCswSingleDay", b =>
                {
                    b.HasBaseType("BaseballScraper.Models.BaseballSavant.StartingPitcherCsw");

                    b.Property<DateTime>("DatePitched");

                    b.ToTable("StartingPitcherCswSingleDay");

                    b.HasDiscriminator().HasValue("StartingPitcherCswSingleDay");
                });

            modelBuilder.Entity("BaseballScraper.Models.Yahoo.YahooManager", b =>
                {
                    b.HasOne("BaseballScraper.Models.Yahoo.YahooTeamBase")
                        .WithMany("TeamManagersList")
                        .HasForeignKey("YahooTeamBaseRecordId");
                });

            modelBuilder.Entity("BaseballScraper.Models.Yahoo.YahooTeamBase", b =>
                {
                    b.HasOne("BaseballScraper.Models.Yahoo.YahooManager", "PrimaryTeamManager")
                        .WithMany()
                        .HasForeignKey("PrimaryTeamManagerYahooManagerRecordId");

                    b.HasOne("BaseballScraper.Models.Yahoo.YahooTeamLogo", "TeamLogo")
                        .WithMany()
                        .HasForeignKey("TeamLogoYahooTeamLogoRecordId");

                    b.HasOne("BaseballScraper.Models.Yahoo.YahooTeamRosterAdds", "TeamRosterAdds")
                        .WithMany()
                        .HasForeignKey("TeamRosterAddsYahooTeamRosterAddsRecordId");
                });
#pragma warning restore 612, 618
        }
    }
}

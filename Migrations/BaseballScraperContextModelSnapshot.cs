// <auto-generated />
using System;
using BaseballScraper.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BaseballScraper.Migrations
{
    [DbContext(typeof(BaseballScraperContext))]
    partial class BaseballScraperContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BaseballScraper.Models.BaseballHq.HqHitterRestOfSeasonProjection", b =>
                {
                    b.Property<int>("HqPlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<int>("AtBatsROS");

                    b.Property<int>("BA_ROS");

                    b.Property<string>("Bats");

                    b.Property<int>("BattingAverageROS");

                    b.Property<int>("BbPercentageROS");

                    b.Property<int>("BpvROS");

                    b.Property<int>("CaughtStealingROS");

                    b.Property<int>("ContactPercentageROS");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("DisabledListROS");

                    b.Property<int>("DoublesROS");

                    b.Property<double>("EyeROS");

                    b.Property<int>("FifteenDollarValueROS");

                    b.Property<string>("FirstName");

                    b.Property<int>("FlyballPercentageROS");

                    b.Property<int>("GroundBallPercentageROS");

                    b.Property<int>("HitPercentageROS");

                    b.Property<int>("HitsROS");

                    b.Property<int>("HomeRunsROS");

                    b.Property<string>("LastName");

                    b.Property<int>("LineDrivePercentageROS");

                    b.Property<int>("MM");

                    b.Property<int>("MlbId");

                    b.Property<string>("MmCode");

                    b.Property<int>("OnBasePercentageROS");

                    b.Property<int>("OnBasePlusSluggingROS");

                    b.Property<string>("Position");

                    b.Property<int>("PxROS");

                    b.Property<double>("RarROS");

                    b.Property<int>("RbiROS");

                    b.Property<double>("RcgROS");

                    b.Property<int>("RspdROS");

                    b.Property<int>("RunsROS");

                    b.Property<int>("SluggingPercentageROS");

                    b.Property<int>("SpeedROS");

                    b.Property<int>("StolenBasesROS");

                    b.Property<int>("StrikeoutsROS");

                    b.Property<string>("Team");

                    b.Property<int>("TriplesROS");

                    b.Property<int>("TwelveDollarValueROS");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("WalksROS");

                    b.Property<int>("XbaROS");

                    b.HasKey("HqPlayerId");

                    b.ToTable("BaseballHqReportHitterROS");
                });

            modelBuilder.Entity("BaseballScraper.Models.BaseballHq.HqHitterYearToDate", b =>
                {
                    b.Property<int>("HqPlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<int>("AtBatsYTD");

                    b.Property<string>("Bats");

                    b.Property<int>("BattingAverageVsLeftHandersYTD");

                    b.Property<int>("BattingAverageVsRightHandersYTD");

                    b.Property<int>("BattingAverageYTD");

                    b.Property<int>("BbPercentageYTD");

                    b.Property<int>("BpvLast31");

                    b.Property<int>("BpvLast7");

                    b.Property<int>("BpvYTD");

                    b.Property<int>("CatcherAppearancesYTD");

                    b.Property<int>("CaughtStealingYTD");

                    b.Property<int>("ContactPercentageYTD");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("DesignatedHitterAppearancesYTD");

                    b.Property<int>("DoublesYTD");

                    b.Property<int>("ExpectedPxLast31");

                    b.Property<int>("ExpectedPxLast7");

                    b.Property<int>("ExpectedPxYTD");

                    b.Property<double>("EyeYTD");

                    b.Property<int>("FirstBaseAppearancesYTD");

                    b.Property<string>("FirstName");

                    b.Property<int>("FlyballOutsYTD");

                    b.Property<int>("FlyballPercentageYTD");

                    b.Property<int>("FlyballsYTD");

                    b.Property<int>("GroundBallPercentageYTD");

                    b.Property<int>("GroundballOutsYTD");

                    b.Property<int>("GroundballsYTD");

                    b.Property<int>("HctxLast31");

                    b.Property<int>("HctxLast7");

                    b.Property<int>("HctxYTD");

                    b.Property<int>("HitPercentageYTD");

                    b.Property<int>("HitsYTD");

                    b.Property<int>("HomeRunsYTD");

                    b.Property<string>("LastName");

                    b.Property<int>("LineDriveOutsYTD");

                    b.Property<int>("LineDrivePercentageYTD");

                    b.Property<int>("LineDrivesYTD");

                    b.Property<int>("MlbId");

                    b.Property<int>("OnBasePercentageVsLeftHanders");

                    b.Property<int>("OnBasePercentageVsRightHanders");

                    b.Property<int>("OnBasePercentageYTD");

                    b.Property<int>("OnBasePlusSluggingYTD");

                    b.Property<int>("OpsVsLeftHandersYTD");

                    b.Property<int>("OpsVsRightHandersYTD");

                    b.Property<int>("OutfielderAppearancesYTD");

                    b.Property<int>("PlateAppearancesVsLeftHandersYTD");

                    b.Property<int>("PlateAppearancesVsRightHandersYTD");

                    b.Property<string>("Position");

                    b.Property<int>("PxLast31");

                    b.Property<int>("PxLast7");

                    b.Property<int>("PxYTD");

                    b.Property<double>("RarLast31");

                    b.Property<double>("RarLast7");

                    b.Property<double>("RarYTD");

                    b.Property<int>("RbiYTD");

                    b.Property<double>("RcgLast31");

                    b.Property<double>("RcgLast7");

                    b.Property<double>("RcgYTD");

                    b.Property<int>("RspdYTD");

                    b.Property<int>("RunsYTD");

                    b.Property<int>("SecondBaseAppearancesYTD");

                    b.Property<int>("ShortstopAppearancesYTD");

                    b.Property<int>("SluggingPercentageVsLeftHanders");

                    b.Property<int>("SluggingPercentageVsRightHanders");

                    b.Property<int>("SluggingPercentageYTD");

                    b.Property<int>("SpeedYTD");

                    b.Property<int>("StolenBasesYTD");

                    b.Property<int>("StrikeoutsYTD");

                    b.Property<string>("Team");

                    b.Property<int>("ThirdBaseAppearancesYTD");

                    b.Property<int>("TriplesYTD");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("WalksYTD");

                    b.Property<int>("XbaLast31");

                    b.Property<int>("XbaLast7");

                    b.Property<int>("XbaYTD");

                    b.HasKey("HqPlayerId");

                    b.ToTable("BaseballHqHitterYTD");
                });

            modelBuilder.Entity("BaseballScraper.Models.BaseballSavant.BaseballSavantHitter", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("MlbIdForeignKey");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("PlayerId");

                    b.ToTable("BaseballSavantHitter");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseballSavantHitter");
                });

            modelBuilder.Entity("BaseballScraper.Models.BaseballSavant.StartingPitcherCsw", b =>
                {
                    b.Property<int?>("StartingPitcherCswId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<decimal?>("CswPitchPercent");

                    b.Property<int?>("CswPitches");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<decimal?>("EffectiveMinVelocity");

                    b.Property<decimal?>("EffectiveSpeed");

                    b.Property<int?>("PlayerId");

                    b.Property<string>("PlayerName");

                    b.Property<int?>("Pos3IntStartDistance");

                    b.Property<int?>("Pos4IntStartDistance");

                    b.Property<int?>("Pos5IntStartDistance");

                    b.Property<int?>("Pos6IntStartDistance");

                    b.Property<int?>("Pos7IntStartDistance");

                    b.Property<int?>("Pos8IntStartDistance");

                    b.Property<int?>("Pos9IntStartDistance");

                    b.Property<decimal?>("ReleaseExtension");

                    b.Property<int?>("SpinRate");

                    b.Property<int?>("Swings");

                    b.Property<int?>("Takes");

                    b.Property<int?>("TotalPitches");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<decimal?>("Velocity");

                    b.Property<int?>("Whiffs");

                    b.HasKey("StartingPitcherCswId");

                    b.ToTable("StartingPitcherCsws");

                    b.HasDiscriminator<string>("Discriminator").HasValue("StartingPitcherCsw");
                });

            modelBuilder.Entity("BaseballScraper.Models.FanGraphs.FanGraphsPitcherForWpdiReport", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Apercentage");

                    b.Property<double>("Bpercentage");

                    b.Property<double>("Cpercentage");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<double>("Dpercentage");

                    b.Property<double>("Epercentage");

                    b.Property<int>("FanGraphsId");

                    b.Property<double>("Fpercentage");

                    b.Property<int>("GamesStarted");

                    b.Property<decimal>("InningsPitched");

                    b.Property<double>("Mpdi");

                    b.Property<double>("OContactPercentage");

                    b.Property<double>("OContactPercentagePfx");

                    b.Property<string>("OContactPercentageString");

                    b.Property<string>("OContactPercentageStringPfx");

                    b.Property<double>("OSwingPercentage");

                    b.Property<double>("OSwingPercentagePfx");

                    b.Property<string>("OSwingPercentageString");

                    b.Property<string>("OSwingPercentageStringPfx");

                    b.Property<double>("OutcomeApercentage");

                    b.Property<double>("OutcomeApercentage_mPDI");

                    b.Property<double>("OutcomeBpercentage");

                    b.Property<double>("OutcomeBpercentage_mPDI");

                    b.Property<double>("OutcomeCpercentage");

                    b.Property<double>("OutcomeDpercentage");

                    b.Property<double>("OutcomeEpercentage");

                    b.Property<double>("OutcomeFpercentage");

                    b.Property<double>("OutcomeFpercentage_mPDI");

                    b.Property<string>("PitcherName");

                    b.Property<string>("PlayerYearConcat");

                    b.Property<int>("Season");

                    b.Property<string>("Team");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<double>("Wpdi");

                    b.Property<double>("ZContactPercentage");

                    b.Property<double>("ZContactPercentagePfx");

                    b.Property<string>("ZContactPercentageString");

                    b.Property<string>("ZContactPercentageStringPfx");

                    b.Property<double>("ZSwingPercentage");

                    b.Property<double>("ZSwingPercentagePfx");

                    b.Property<string>("ZSwingPercentageString");

                    b.Property<string>("ZSwingPercentageStringPfx");

                    b.Property<double>("ZonePercentage");

                    b.Property<double>("ZonePercentagePfx");

                    b.Property<string>("ZonePercentageString");

                    b.Property<string>("ZonePercentageStringPfx");

                    b.HasKey("RecordId");

                    b.ToTable("FanGraphsPitcherForWpdiReport");
                });

            modelBuilder.Entity("BaseballScraper.Models.Player.PlayerNote", b =>
                {
                    b.Property<int>("PlayerNoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CalendarYear");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Note");

                    b.Property<string>("NoteTone");

                    b.Property<string>("NoteWriter");

                    b.Property<string>("PlayerName");

                    b.Property<string>("Position");

                    b.Property<string>("PositionType");

                    b.Property<int?>("Season");

                    b.Property<string>("SourceSite");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("PlayerNoteId");

                    b.ToTable("PlayerNotes");
                });

            modelBuilder.Entity("BaseballScraper.Models.Player.SfbbPlayerBase", b =>
                {
                    b.Property<string>("IDPLAYER")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ALLPOS");

                    b.Property<string>("BATS");

                    b.Property<string>("BIRTHDATE");

                    b.Property<string>("BPID");

                    b.Property<string>("BREFID");

                    b.Property<int?>("BaseballSavantHitterForeignKey");

                    b.Property<string>("CBSID");

                    b.Property<string>("CBSNAME");

                    b.Property<string>("DAVENPORTID");

                    b.Property<string>("DRAFTKINGSNAME");

                    b.Property<string>("ESPNID");

                    b.Property<string>("ESPNNAME");

                    b.Property<string>("FANDUELID");

                    b.Property<string>("FANDUELNAME");

                    b.Property<string>("FANGRAPHSNAME");

                    b.Property<string>("FANPROSNAME");

                    b.Property<string>("FANTRAXID");

                    b.Property<string>("FANTRAXNAME");

                    b.Property<string>("FIRSTNAME");

                    b.Property<string>("HQID");

                    b.Property<string>("IDFANGRAPHS");

                    b.Property<string>("KFFLNAME");

                    b.Property<string>("LASTCOMMAFIRST");

                    b.Property<string>("LASTNAME");

                    b.Property<string>("LG");

                    b.Property<int?>("MLBID");

                    b.Property<string>("MLBNAME");

                    b.Property<string>("MSTRBLLNAME");

                    b.Property<string>("NFBCID");

                    b.Property<string>("NFBCLASTFIRST");

                    b.Property<string>("NFBCNAME");

                    b.Property<string>("OTTONEUID");

                    b.Property<string>("PLAYERNAME");

                    b.Property<string>("POS");

                    b.Property<string>("RAZZBALLNAME");

                    b.Property<string>("RETROID");

                    b.Property<string>("ROTOWIREID");

                    b.Property<string>("ROTOWIRENAME");

                    b.Property<string>("TEAM");

                    b.Property<string>("THROWS");

                    b.Property<string>("YAHOOID");

                    b.Property<string>("YAHOONAME");

                    b.HasKey("IDPLAYER");

                    b.HasIndex("MLBID")
                        .IsUnique();

                    b.ToTable("SfbbPlayerBases");
                });

            modelBuilder.Entity("BaseballScraper.Models.Yahoo.Resources.YahooTeamResource.YahooTeamResource", b =>
                {
                    b.Property<int>("YahooTeamBaseRecordId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HasDraftGrade");

                    b.Property<int?>("IsOwnedByCurrentLogin");

                    b.Property<string>("LeagueScoringType");

                    b.Property<int?>("NumberOfMoves");

                    b.Property<int?>("NumberOfTrades");

                    b.Property<int?>("PrimaryTeamManagerYahooManagerRecordId");

                    b.Property<int?>("TeamId");

                    b.Property<string>("TeamKey");

                    b.Property<int?>("TeamLogoYahooTeamLogoRecordId");

                    b.Property<string>("TeamName");

                    b.Property<int?>("TeamRosterAddsYahooTeamRosterAddsRecordId");

                    b.Property<string>("Url");

                    b.Property<int?>("WaiverPriority");

                    b.HasKey("YahooTeamBaseRecordId");

                    b.HasIndex("PrimaryTeamManagerYahooManagerRecordId");

                    b.HasIndex("TeamLogoYahooTeamLogoRecordId");

                    b.HasIndex("TeamRosterAddsYahooTeamRosterAddsRecordId");

                    b.ToTable("YahooTeamResource");
                });

            modelBuilder.Entity("BaseballScraper.Models.Yahoo.YahooManager", b =>
                {
                    b.Property<int>("YahooManagerRecordId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Guid");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("IsCommissioner");

                    b.Property<string>("IsCurrentLogin");

                    b.Property<string>("ManagerId");

                    b.Property<string>("NickName");

                    b.Property<int?>("YahooTeamResourceYahooTeamBaseRecordId");

                    b.HasKey("YahooManagerRecordId");

                    b.HasIndex("YahooTeamResourceYahooTeamBaseRecordId");

                    b.ToTable("YahooManager");
                });

            modelBuilder.Entity("BaseballScraper.Models.Yahoo.YahooTeamLogo", b =>
                {
                    b.Property<int>("YahooTeamLogoRecordId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Size");

                    b.Property<int>("TeamLogoId");

                    b.Property<string>("Url");

                    b.HasKey("YahooTeamLogoRecordId");

                    b.ToTable("YahooTeamLogo");
                });

            modelBuilder.Entity("BaseballScraper.Models.Yahoo.YahooTeamRosterAdds", b =>
                {
                    b.Property<int>("YahooTeamRosterAddsRecordId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CoverageType");

                    b.Property<string>("CoverageValue");

                    b.Property<string>("Value");

                    b.HasKey("YahooTeamRosterAddsRecordId");

                    b.ToTable("YahooTeamRosterAdds");
                });

            modelBuilder.Entity("BaseballScraper.Models.BaseballSavant.ExitVelocityAndBarrelsHitter", b =>
                {
                    b.HasBaseType("BaseballScraper.Models.BaseballSavant.BaseballSavantHitter");

                    b.Property<double>("AngleSweetSpotPercent");

                    b.Property<int>("Attempts");

                    b.Property<int>("AverageDistance");

                    b.Property<double>("AverageExitVelocity");

                    b.Property<double>("AverageExitVelocityFlyBallsAndLineDrives");

                    b.Property<double>("AverageExitVelocityGroundballs");

                    b.Property<double>("AverageHitAngle");

                    b.Property<int?>("AverageHomeRunDistance");

                    b.Property<int>("BallsHitHigherThan95mph");

                    b.Property<double>("BarrelsPerBattedBallEvent");

                    b.Property<double>("BarrelsPerPlateAppearance");

                    b.Property<int>("MaxDistance");

                    b.Property<double>("MaxExitVelocity");

                    b.Property<int>("NumberOfBarrels");

                    b.Property<double>("PercentageBallsHitHigherThan95mph");

                    b.HasDiscriminator().HasValue("ExitVelocityAndBarrelsHitter");
                });

            modelBuilder.Entity("BaseballScraper.Models.BaseballSavant.XstatsHitter", b =>
                {
                    b.HasBaseType("BaseballScraper.Models.BaseballSavant.BaseballSavantHitter");

                    b.Property<int>("BallsInPlay");

                    b.Property<double>("BattingAverage");

                    b.Property<double>("BattingAverageDifference");

                    b.Property<double>("ExpectedBattingAverage");

                    b.Property<double>("ExpectedSluggingPercentage");

                    b.Property<double>("ExpectedWoba");

                    b.Property<int>("PlateAppearances");

                    b.Property<double>("SluggingPercentage");

                    b.Property<double>("SluggingPercentageDifference");

                    b.Property<double>("Woba");

                    b.Property<double>("WobaDifference");

                    b.Property<int>("Year");

                    b.HasDiscriminator().HasValue("XstatsHitter");
                });

            modelBuilder.Entity("BaseballScraper.Models.BaseballSavant.StartingPitcherCswDateRange", b =>
                {
                    b.HasBaseType("BaseballScraper.Models.BaseballSavant.StartingPitcherCsw");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.HasDiscriminator().HasValue("StartingPitcherCswDateRange");
                });

            modelBuilder.Entity("BaseballScraper.Models.BaseballSavant.StartingPitcherCswSingleDay", b =>
                {
                    b.HasBaseType("BaseballScraper.Models.BaseballSavant.StartingPitcherCsw");

                    b.Property<DateTime>("DatePitched");

                    b.HasDiscriminator().HasValue("StartingPitcherCswSingleDay");
                });

            modelBuilder.Entity("BaseballScraper.Models.Player.SfbbPlayerBase", b =>
                {
                    b.HasOne("BaseballScraper.Models.BaseballSavant.BaseballSavantHitter", "BaseballSavantHitter")
                        .WithOne("SfbbPlayerBase")
                        .HasForeignKey("BaseballScraper.Models.Player.SfbbPlayerBase", "MLBID");
                });

            modelBuilder.Entity("BaseballScraper.Models.Yahoo.Resources.YahooTeamResource.YahooTeamResource", b =>
                {
                    b.HasOne("BaseballScraper.Models.Yahoo.YahooManager", "PrimaryTeamManager")
                        .WithMany()
                        .HasForeignKey("PrimaryTeamManagerYahooManagerRecordId");

                    b.HasOne("BaseballScraper.Models.Yahoo.YahooTeamLogo", "TeamLogo")
                        .WithMany()
                        .HasForeignKey("TeamLogoYahooTeamLogoRecordId");

                    b.HasOne("BaseballScraper.Models.Yahoo.YahooTeamRosterAdds", "TeamRosterAdds")
                        .WithMany()
                        .HasForeignKey("TeamRosterAddsYahooTeamRosterAddsRecordId");
                });

            modelBuilder.Entity("BaseballScraper.Models.Yahoo.YahooManager", b =>
                {
                    b.HasOne("BaseballScraper.Models.Yahoo.Resources.YahooTeamResource.YahooTeamResource")
                        .WithMany("TeamManagersList")
                        .HasForeignKey("YahooTeamResourceYahooTeamBaseRecordId");
                });
#pragma warning restore 612, 618
        }
    }
}

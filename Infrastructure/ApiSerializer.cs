// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

using System;
using System.Collections.Generic;

using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.Serialization.Json;
using System.Text;
using BaseballScraper.EndPoints;
using BaseballScraper.Models.MlbDataApi;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using RestSharp;

namespace BaseballScraper.Infrastructure
{
    public class ApiSerializer
    {
        public static object FromJson(string json) => JsonConvert.DeserializeObject<object>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this object self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling        = DateParseHandling.None,
            Converters               = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    public class ApiInfrastructure
    {
        private Constants _c                          = new Constants();
        private static MlbDataApiEndPoints _endPoints = new MlbDataApiEndPoints();

        /// <summary> Serialize a given object to a JSON stream (i.e., take a given object and convert it to JSON ) </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public string ReturnJsonFromObject (Object obj)
        {
            // _c.Start.ThisMethod();
            //Create a stream to serialize the object to.
            MemoryStream mS = new MemoryStream();

            var objType = obj.GetType();
            Console.WriteLine($"OBJECT TYPE BEING SERIALIZED IS: {objType}");

            // Serializer the given object to the stream
            DataContractJsonSerializer serializer = new DataContractJsonSerializer(objType);

            serializer.WriteObject(mS, obj);
            byte[] json      = mS.ToArray();
                 mS.Position = 0;

            StreamReader sR = new StreamReader(mS);
            Console.WriteLine(sR.ReadToEnd());

            mS.Close();

            // var returnedString = Encoding.UTF8.GetString(json, 0, json.Length);
            // Console.WriteLine($"FINAL TYPE IS: {returnedString.GetType()}");
            // Console.WriteLine($"FINAL JSON IS: {returnedString}");

            return Encoding.UTF8.GetString(json, 0, json.Length);
        }


        public JObject CreateModelJObject(IRestResponse response)
        {
            _c.Start.ThisMethod();

            var responseToJson = response.Content;
            // clean up / better structure the json
            JObject responseToJObject = JObject.Parse(responseToJson);
            // Extensions.PrintJObjectItems(responseToJObject);

            _c.Complete.ThisMethod();
            return responseToJObject;
        }


        public JToken CreateModelJToken(JObject obj, string modelType)
        {
            _c.Start.ThisMethod();
            Extensions.Spotlight("API SERIALIZER | Create model j token");
            Console.WriteLine($"CREATING J TOKEN FOR MODEL TYPE: {modelType}");
            Console.WriteLine();

            JToken modelToken = CreateObjectJTokenFromSwitch(obj, modelType);

            _c.Complete.ThisMethod();
            return modelToken;
        }

        public Object CreateInstanceOfModel (JToken token, Object obj, string modelType)
        {
            _c.Start.ThisMethod();

            string tokenToString = token.ToString();

            // BaseballScraper.Models.MlbDataApi.PlayerSearch
            // Type modelType = obj.GetType();
            Extensions.Spotlight("API SERIALIZER | Create instance of model");
            Console.WriteLine($"CREATING NEW INSTANCE OF {obj.GetType()}");
            Console.WriteLine();

            MemoryStream memoryStream = new MemoryStream(Encoding.UTF8.GetBytes(tokenToString));

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(obj.GetType());

            obj = SetTypeToReadObjectAs(obj, memoryStream, serializer, modelType);

            // obj = serializer.ReadObject(memoryStream) as PlayerSearch;

            memoryStream.Close();

            Extensions.Spotlight("CREATED MODEL INSTANCE");
            ReturnJsonFromObject(obj);

            _c.Complete.ThisMethod();
            return obj;
        }

        internal Object SetTypeToReadObjectAs (Object obj, MemoryStream memoryStream, DataContractJsonSerializer serializer, string modelType)
        {
            _c.Start.ThisMethod();

            switch(modelType)
            {
                case "PlayerSearch": 
                    return serializer.ReadObject(memoryStream) as PlayerSearch;
                case "PlayerInfo": 
                    return serializer.ReadObject(memoryStream) as PlayerInfo;
                case "ProjectedPitchingStats": 
                    return serializer.ReadObject(memoryStream) as ProjectedPitchingStats;
                case "ProjectedHittingStats": 
                    return serializer.ReadObject(memoryStream) as ProjectedHittingStats;

            }
            throw new System.Exception("no model type found");
        }

        internal JToken CreateObjectJTokenFromSwitch(JObject obj, string tokenName)
        {
            _c.Start.ThisMethod();

            Extensions.Spotlight("API SERIALIZER | Create object j token from switch");
            Console.WriteLine($"CREATING J TOKEN FOR OBJECT TYPE: {tokenName}");
            Console.WriteLine();


            switch(tokenName)
            {
                case "PlayerSearch": 
                    return obj["search_player_all"]["queryResults"]["row"];

                case "PlayerInfo": 
                    return obj["player_info"]["queryResults"]["row"];

                case "ProjectedPitchingStats": 
                    return obj["proj_pecota_pitching"]["queryResults"]["row"];

                case "ProjectedHittingStats": 
                    return obj["proj_pecota_batting"]["queryResults"]["row"];
            }

            _c.Complete.ThisMethod();
            Console.WriteLine("------ API J TOKEN IS BROKEN ------");
            throw new System.Exception("no api type found");
        }
    }
}
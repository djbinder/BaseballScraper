using System.Threading.Tasks;
using BaseballScraper.EndPoints;
using BaseballScraper.Infrastructure;
using RestSharp;

namespace BaseballScraper.Infrastructure
{
    public class PostmanMethods
    {
        public class PostmanRequest
        {
            public RestClient Client { get; set; }
            public RestRequest Request { get; set; }
        }
        public class PostmanResponse
        {
            public IRestResponse Response { get; set; }
        }


        // STATUS: this works
        public PostmanRequest CreatePostmanRequest (MlbDataApiEndPoints.MlbDataEndPoint endPoint, string tokenType)
        {
            var endPointUri = endPoint.EndPointUri;

            PostmanRequest postmanRequest = new PostmanRequest()
            {
                Client  = new RestClient(endPointUri),
                Request = new RestRequest(Method.GET)
            };

            string postmanToken = PostmanToken(tokenType);

            postmanRequest.Request.AddHeader("Postman-Token", postmanToken);
            postmanRequest.Request.AddHeader("Cache-Control", "no-cache");

            return postmanRequest;
        }

        // STATUS: this works
        public PostmanResponse GetPostmanResponse(PostmanRequest request)
        {
            return new PostmanResponse
            {
                Response = request.Client.Execute(request.Request)
            };
        }

        // STATUS: this works
        /// <summary> A switch that returns a postman token depending upon the end type you are use </summary>
        /// <remarks> Each of the return values were generated by Postman </remarks>
        /// <param name="apiType"> The api method / endpoinot you are querying </param>
        /// <returns> A string that represents an api Postman token</returns>
        internal string PostmanToken(string apiType)
        {
            switch(apiType)
            {
                case "PlayerSearch":
                    return "e49343c5-1a5a-4666-842f-ee67cb1796fc";

                case "PlayerInfo":
                    return "bbd0ee6c-aa7e-4f56-a501-dd1bb3842307";

                case "ProjectedPitchingStats":
                    return "410f04b5-78a0-4d88-a7c8-ec4425e45173";

                case "ProjectedHittingStats":
                    return "bc1efdd8-3fc4-4836-b3c7-2e0364a2c618";

                case "PitchingLeaders":
                    return "81596fc7-3027-4c1a-8288-8baca8d9a7e3";

                case "HittingLeaders":
                    return "bc59dbdc-2968-4c03-9fe4-eededd57c016";

                case "HitterSeasonStats":
                    return "b037e4c8-be75-4604-ab5b-74f7033a5fb4";
            }

            throw new System.Exception("no api type found");
        }
    }
}
